// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: assets.proto

package jstreams_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AssetsService_GetRuneIcon_FullMethodName                      = "/assets.AssetsService/GetRuneIcon"
	AssetsService_GetSummonerSpellIcon_FullMethodName             = "/assets.AssetsService/GetSummonerSpellIcon"
	AssetsService_GetItemAssetUrl_FullMethodName                  = "/assets.AssetsService/GetItemAssetUrl"
	AssetsService_GetSpellAssetUrl_FullMethodName                 = "/assets.AssetsService/GetSpellAssetUrl"
	AssetsService_GetChampionAbilityAssetUrl_FullMethodName       = "/assets.AssetsService/GetChampionAbilityAssetUrl"
	AssetsService_GetChampionPassiveAssetUrl_FullMethodName       = "/assets.AssetsService/GetChampionPassiveAssetUrl"
	AssetsService_GetChampionSquareAssetUrl_FullMethodName        = "/assets.AssetsService/GetChampionSquareAssetUrl"
	AssetsService_GetChampionLoadingScreenAssetUrl_FullMethodName = "/assets.AssetsService/GetChampionLoadingScreenAssetUrl"
	AssetsService_GetChampionSplashAssetUrl_FullMethodName        = "/assets.AssetsService/GetChampionSplashAssetUrl"
)

// AssetsServiceClient is the client API for AssetsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetsServiceClient interface {
	GetRuneIcon(ctx context.Context, in *GetRuneIconRequest, opts ...grpc.CallOption) (*GetRuneIconResponse, error)
	GetSummonerSpellIcon(ctx context.Context, in *GetSummonerSpellIconRequest, opts ...grpc.CallOption) (*GetSummonerSpellIconResponse, error)
	GetItemAssetUrl(ctx context.Context, in *GetItemAssetUrlRequest, opts ...grpc.CallOption) (*GetItemAssetUrlResponse, error)
	GetSpellAssetUrl(ctx context.Context, in *GetSpellAssetUrlRequest, opts ...grpc.CallOption) (*GetSpellAssetUrlResponse, error)
	GetChampionAbilityAssetUrl(ctx context.Context, in *GetChampionAbilityAssetUrlRequest, opts ...grpc.CallOption) (*GetChampionAbilityAssetUrlResponse, error)
	GetChampionPassiveAssetUrl(ctx context.Context, in *GetChampionPassiveAssetUrlRequest, opts ...grpc.CallOption) (*GetChampionPassiveAssetUrlResponse, error)
	GetChampionSquareAssetUrl(ctx context.Context, in *GetChampionSquareAssetUrlRequest, opts ...grpc.CallOption) (*GetChampionSquareAssetUrlResponse, error)
	GetChampionLoadingScreenAssetUrl(ctx context.Context, in *GetChampionLoadingScreenAssetUrlRequest, opts ...grpc.CallOption) (*GetChampionLoadingScreenAssetUrlResponse, error)
	GetChampionSplashAssetUrl(ctx context.Context, in *GetChampionSplashAssetUrlRequest, opts ...grpc.CallOption) (*GetChampionSplashAssetUrlResponse, error)
}

type assetsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetsServiceClient(cc grpc.ClientConnInterface) AssetsServiceClient {
	return &assetsServiceClient{cc}
}

func (c *assetsServiceClient) GetRuneIcon(ctx context.Context, in *GetRuneIconRequest, opts ...grpc.CallOption) (*GetRuneIconResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRuneIconResponse)
	err := c.cc.Invoke(ctx, AssetsService_GetRuneIcon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) GetSummonerSpellIcon(ctx context.Context, in *GetSummonerSpellIconRequest, opts ...grpc.CallOption) (*GetSummonerSpellIconResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSummonerSpellIconResponse)
	err := c.cc.Invoke(ctx, AssetsService_GetSummonerSpellIcon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) GetItemAssetUrl(ctx context.Context, in *GetItemAssetUrlRequest, opts ...grpc.CallOption) (*GetItemAssetUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetItemAssetUrlResponse)
	err := c.cc.Invoke(ctx, AssetsService_GetItemAssetUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) GetSpellAssetUrl(ctx context.Context, in *GetSpellAssetUrlRequest, opts ...grpc.CallOption) (*GetSpellAssetUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSpellAssetUrlResponse)
	err := c.cc.Invoke(ctx, AssetsService_GetSpellAssetUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) GetChampionAbilityAssetUrl(ctx context.Context, in *GetChampionAbilityAssetUrlRequest, opts ...grpc.CallOption) (*GetChampionAbilityAssetUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChampionAbilityAssetUrlResponse)
	err := c.cc.Invoke(ctx, AssetsService_GetChampionAbilityAssetUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) GetChampionPassiveAssetUrl(ctx context.Context, in *GetChampionPassiveAssetUrlRequest, opts ...grpc.CallOption) (*GetChampionPassiveAssetUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChampionPassiveAssetUrlResponse)
	err := c.cc.Invoke(ctx, AssetsService_GetChampionPassiveAssetUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) GetChampionSquareAssetUrl(ctx context.Context, in *GetChampionSquareAssetUrlRequest, opts ...grpc.CallOption) (*GetChampionSquareAssetUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChampionSquareAssetUrlResponse)
	err := c.cc.Invoke(ctx, AssetsService_GetChampionSquareAssetUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) GetChampionLoadingScreenAssetUrl(ctx context.Context, in *GetChampionLoadingScreenAssetUrlRequest, opts ...grpc.CallOption) (*GetChampionLoadingScreenAssetUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChampionLoadingScreenAssetUrlResponse)
	err := c.cc.Invoke(ctx, AssetsService_GetChampionLoadingScreenAssetUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) GetChampionSplashAssetUrl(ctx context.Context, in *GetChampionSplashAssetUrlRequest, opts ...grpc.CallOption) (*GetChampionSplashAssetUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChampionSplashAssetUrlResponse)
	err := c.cc.Invoke(ctx, AssetsService_GetChampionSplashAssetUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetsServiceServer is the server API for AssetsService service.
// All implementations must embed UnimplementedAssetsServiceServer
// for forward compatibility.
type AssetsServiceServer interface {
	GetRuneIcon(context.Context, *GetRuneIconRequest) (*GetRuneIconResponse, error)
	GetSummonerSpellIcon(context.Context, *GetSummonerSpellIconRequest) (*GetSummonerSpellIconResponse, error)
	GetItemAssetUrl(context.Context, *GetItemAssetUrlRequest) (*GetItemAssetUrlResponse, error)
	GetSpellAssetUrl(context.Context, *GetSpellAssetUrlRequest) (*GetSpellAssetUrlResponse, error)
	GetChampionAbilityAssetUrl(context.Context, *GetChampionAbilityAssetUrlRequest) (*GetChampionAbilityAssetUrlResponse, error)
	GetChampionPassiveAssetUrl(context.Context, *GetChampionPassiveAssetUrlRequest) (*GetChampionPassiveAssetUrlResponse, error)
	GetChampionSquareAssetUrl(context.Context, *GetChampionSquareAssetUrlRequest) (*GetChampionSquareAssetUrlResponse, error)
	GetChampionLoadingScreenAssetUrl(context.Context, *GetChampionLoadingScreenAssetUrlRequest) (*GetChampionLoadingScreenAssetUrlResponse, error)
	GetChampionSplashAssetUrl(context.Context, *GetChampionSplashAssetUrlRequest) (*GetChampionSplashAssetUrlResponse, error)
	mustEmbedUnimplementedAssetsServiceServer()
}

// UnimplementedAssetsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAssetsServiceServer struct{}

func (UnimplementedAssetsServiceServer) GetRuneIcon(context.Context, *GetRuneIconRequest) (*GetRuneIconResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuneIcon not implemented")
}
func (UnimplementedAssetsServiceServer) GetSummonerSpellIcon(context.Context, *GetSummonerSpellIconRequest) (*GetSummonerSpellIconResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummonerSpellIcon not implemented")
}
func (UnimplementedAssetsServiceServer) GetItemAssetUrl(context.Context, *GetItemAssetUrlRequest) (*GetItemAssetUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemAssetUrl not implemented")
}
func (UnimplementedAssetsServiceServer) GetSpellAssetUrl(context.Context, *GetSpellAssetUrlRequest) (*GetSpellAssetUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpellAssetUrl not implemented")
}
func (UnimplementedAssetsServiceServer) GetChampionAbilityAssetUrl(context.Context, *GetChampionAbilityAssetUrlRequest) (*GetChampionAbilityAssetUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChampionAbilityAssetUrl not implemented")
}
func (UnimplementedAssetsServiceServer) GetChampionPassiveAssetUrl(context.Context, *GetChampionPassiveAssetUrlRequest) (*GetChampionPassiveAssetUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChampionPassiveAssetUrl not implemented")
}
func (UnimplementedAssetsServiceServer) GetChampionSquareAssetUrl(context.Context, *GetChampionSquareAssetUrlRequest) (*GetChampionSquareAssetUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChampionSquareAssetUrl not implemented")
}
func (UnimplementedAssetsServiceServer) GetChampionLoadingScreenAssetUrl(context.Context, *GetChampionLoadingScreenAssetUrlRequest) (*GetChampionLoadingScreenAssetUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChampionLoadingScreenAssetUrl not implemented")
}
func (UnimplementedAssetsServiceServer) GetChampionSplashAssetUrl(context.Context, *GetChampionSplashAssetUrlRequest) (*GetChampionSplashAssetUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChampionSplashAssetUrl not implemented")
}
func (UnimplementedAssetsServiceServer) mustEmbedUnimplementedAssetsServiceServer() {}
func (UnimplementedAssetsServiceServer) testEmbeddedByValue()                       {}

// UnsafeAssetsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetsServiceServer will
// result in compilation errors.
type UnsafeAssetsServiceServer interface {
	mustEmbedUnimplementedAssetsServiceServer()
}

func RegisterAssetsServiceServer(s grpc.ServiceRegistrar, srv AssetsServiceServer) {
	// If the following call pancis, it indicates UnimplementedAssetsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AssetsService_ServiceDesc, srv)
}

func _AssetsService_GetRuneIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuneIconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetRuneIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_GetRuneIcon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetRuneIcon(ctx, req.(*GetRuneIconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_GetSummonerSpellIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSummonerSpellIconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetSummonerSpellIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_GetSummonerSpellIcon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetSummonerSpellIcon(ctx, req.(*GetSummonerSpellIconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_GetItemAssetUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemAssetUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetItemAssetUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_GetItemAssetUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetItemAssetUrl(ctx, req.(*GetItemAssetUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_GetSpellAssetUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpellAssetUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetSpellAssetUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_GetSpellAssetUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetSpellAssetUrl(ctx, req.(*GetSpellAssetUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_GetChampionAbilityAssetUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChampionAbilityAssetUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetChampionAbilityAssetUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_GetChampionAbilityAssetUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetChampionAbilityAssetUrl(ctx, req.(*GetChampionAbilityAssetUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_GetChampionPassiveAssetUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChampionPassiveAssetUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetChampionPassiveAssetUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_GetChampionPassiveAssetUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetChampionPassiveAssetUrl(ctx, req.(*GetChampionPassiveAssetUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_GetChampionSquareAssetUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChampionSquareAssetUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetChampionSquareAssetUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_GetChampionSquareAssetUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetChampionSquareAssetUrl(ctx, req.(*GetChampionSquareAssetUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_GetChampionLoadingScreenAssetUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChampionLoadingScreenAssetUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetChampionLoadingScreenAssetUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_GetChampionLoadingScreenAssetUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetChampionLoadingScreenAssetUrl(ctx, req.(*GetChampionLoadingScreenAssetUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_GetChampionSplashAssetUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChampionSplashAssetUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetChampionSplashAssetUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_GetChampionSplashAssetUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetChampionSplashAssetUrl(ctx, req.(*GetChampionSplashAssetUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssetsService_ServiceDesc is the grpc.ServiceDesc for AssetsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssetsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "assets.AssetsService",
	HandlerType: (*AssetsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRuneIcon",
			Handler:    _AssetsService_GetRuneIcon_Handler,
		},
		{
			MethodName: "GetSummonerSpellIcon",
			Handler:    _AssetsService_GetSummonerSpellIcon_Handler,
		},
		{
			MethodName: "GetItemAssetUrl",
			Handler:    _AssetsService_GetItemAssetUrl_Handler,
		},
		{
			MethodName: "GetSpellAssetUrl",
			Handler:    _AssetsService_GetSpellAssetUrl_Handler,
		},
		{
			MethodName: "GetChampionAbilityAssetUrl",
			Handler:    _AssetsService_GetChampionAbilityAssetUrl_Handler,
		},
		{
			MethodName: "GetChampionPassiveAssetUrl",
			Handler:    _AssetsService_GetChampionPassiveAssetUrl_Handler,
		},
		{
			MethodName: "GetChampionSquareAssetUrl",
			Handler:    _AssetsService_GetChampionSquareAssetUrl_Handler,
		},
		{
			MethodName: "GetChampionLoadingScreenAssetUrl",
			Handler:    _AssetsService_GetChampionLoadingScreenAssetUrl_Handler,
		},
		{
			MethodName: "GetChampionSplashAssetUrl",
			Handler:    _AssetsService_GetChampionSplashAssetUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "assets.proto",
}
