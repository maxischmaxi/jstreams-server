// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: matches.proto

package jstreams_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MatchesService_GetMatchTimeline_FullMethodName   = "/matches.MatchesService/GetMatchTimeline"
	MatchesService_GetMatchByMatchId_FullMethodName  = "/matches.MatchesService/GetMatchByMatchId"
	MatchesService_GetMatchIdsByPuuid_FullMethodName = "/matches.MatchesService/GetMatchIdsByPuuid"
)

// MatchesServiceClient is the client API for MatchesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchesServiceClient interface {
	GetMatchTimeline(ctx context.Context, in *GetMatchTimelineRequest, opts ...grpc.CallOption) (*GetMatchTimelineResponse, error)
	GetMatchByMatchId(ctx context.Context, in *GetMatchByMatchIdRequest, opts ...grpc.CallOption) (*GetMatchByMatchIdResponse, error)
	GetMatchIdsByPuuid(ctx context.Context, in *GetMatchIdsByPuuidRequest, opts ...grpc.CallOption) (*GetMatchIdsByPuuidResponse, error)
}

type matchesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchesServiceClient(cc grpc.ClientConnInterface) MatchesServiceClient {
	return &matchesServiceClient{cc}
}

func (c *matchesServiceClient) GetMatchTimeline(ctx context.Context, in *GetMatchTimelineRequest, opts ...grpc.CallOption) (*GetMatchTimelineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMatchTimelineResponse)
	err := c.cc.Invoke(ctx, MatchesService_GetMatchTimeline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchesServiceClient) GetMatchByMatchId(ctx context.Context, in *GetMatchByMatchIdRequest, opts ...grpc.CallOption) (*GetMatchByMatchIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMatchByMatchIdResponse)
	err := c.cc.Invoke(ctx, MatchesService_GetMatchByMatchId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchesServiceClient) GetMatchIdsByPuuid(ctx context.Context, in *GetMatchIdsByPuuidRequest, opts ...grpc.CallOption) (*GetMatchIdsByPuuidResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMatchIdsByPuuidResponse)
	err := c.cc.Invoke(ctx, MatchesService_GetMatchIdsByPuuid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchesServiceServer is the server API for MatchesService service.
// All implementations must embed UnimplementedMatchesServiceServer
// for forward compatibility.
type MatchesServiceServer interface {
	GetMatchTimeline(context.Context, *GetMatchTimelineRequest) (*GetMatchTimelineResponse, error)
	GetMatchByMatchId(context.Context, *GetMatchByMatchIdRequest) (*GetMatchByMatchIdResponse, error)
	GetMatchIdsByPuuid(context.Context, *GetMatchIdsByPuuidRequest) (*GetMatchIdsByPuuidResponse, error)
	mustEmbedUnimplementedMatchesServiceServer()
}

// UnimplementedMatchesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMatchesServiceServer struct{}

func (UnimplementedMatchesServiceServer) GetMatchTimeline(context.Context, *GetMatchTimelineRequest) (*GetMatchTimelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchTimeline not implemented")
}
func (UnimplementedMatchesServiceServer) GetMatchByMatchId(context.Context, *GetMatchByMatchIdRequest) (*GetMatchByMatchIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchByMatchId not implemented")
}
func (UnimplementedMatchesServiceServer) GetMatchIdsByPuuid(context.Context, *GetMatchIdsByPuuidRequest) (*GetMatchIdsByPuuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchIdsByPuuid not implemented")
}
func (UnimplementedMatchesServiceServer) mustEmbedUnimplementedMatchesServiceServer() {}
func (UnimplementedMatchesServiceServer) testEmbeddedByValue()                        {}

// UnsafeMatchesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchesServiceServer will
// result in compilation errors.
type UnsafeMatchesServiceServer interface {
	mustEmbedUnimplementedMatchesServiceServer()
}

func RegisterMatchesServiceServer(s grpc.ServiceRegistrar, srv MatchesServiceServer) {
	// If the following call pancis, it indicates UnimplementedMatchesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MatchesService_ServiceDesc, srv)
}

func _MatchesService_GetMatchTimeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchTimelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchesServiceServer).GetMatchTimeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchesService_GetMatchTimeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchesServiceServer).GetMatchTimeline(ctx, req.(*GetMatchTimelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchesService_GetMatchByMatchId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchByMatchIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchesServiceServer).GetMatchByMatchId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchesService_GetMatchByMatchId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchesServiceServer).GetMatchByMatchId(ctx, req.(*GetMatchByMatchIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchesService_GetMatchIdsByPuuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchIdsByPuuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchesServiceServer).GetMatchIdsByPuuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchesService_GetMatchIdsByPuuid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchesServiceServer).GetMatchIdsByPuuid(ctx, req.(*GetMatchIdsByPuuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MatchesService_ServiceDesc is the grpc.ServiceDesc for MatchesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "matches.MatchesService",
	HandlerType: (*MatchesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMatchTimeline",
			Handler:    _MatchesService_GetMatchTimeline_Handler,
		},
		{
			MethodName: "GetMatchByMatchId",
			Handler:    _MatchesService_GetMatchByMatchId_Handler,
		},
		{
			MethodName: "GetMatchIdsByPuuid",
			Handler:    _MatchesService_GetMatchIdsByPuuid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "matches.proto",
}
