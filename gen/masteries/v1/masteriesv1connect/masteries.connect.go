// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: masteries/v1/masteries.proto

package masteriesv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "maxischmaxi/jstreams-server/gen/masteries/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MasteriesServiceName is the fully-qualified name of the MasteriesService service.
	MasteriesServiceName = "masteries.MasteriesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MasteriesServiceGetChampionMasteriesByPuuidProcedure is the fully-qualified name of the
	// MasteriesService's GetChampionMasteriesByPuuid RPC.
	MasteriesServiceGetChampionMasteriesByPuuidProcedure = "/masteries.MasteriesService/GetChampionMasteriesByPuuid"
	// MasteriesServiceGetChampionMasteriesByPuuidByChampionProcedure is the fully-qualified name of the
	// MasteriesService's GetChampionMasteriesByPuuidByChampion RPC.
	MasteriesServiceGetChampionMasteriesByPuuidByChampionProcedure = "/masteries.MasteriesService/GetChampionMasteriesByPuuidByChampion"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	masteriesServiceServiceDescriptor                                     = v1.File_masteries_v1_masteries_proto.Services().ByName("MasteriesService")
	masteriesServiceGetChampionMasteriesByPuuidMethodDescriptor           = masteriesServiceServiceDescriptor.Methods().ByName("GetChampionMasteriesByPuuid")
	masteriesServiceGetChampionMasteriesByPuuidByChampionMethodDescriptor = masteriesServiceServiceDescriptor.Methods().ByName("GetChampionMasteriesByPuuidByChampion")
)

// MasteriesServiceClient is a client for the masteries.MasteriesService service.
type MasteriesServiceClient interface {
	GetChampionMasteriesByPuuid(context.Context, *connect.Request[v1.GetChampionMasteriesRequeset]) (*connect.Response[v1.GetChampionMasteriesResponse], error)
	GetChampionMasteriesByPuuidByChampion(context.Context, *connect.Request[v1.GetChampionMasteriesByChampionRequeset]) (*connect.Response[v1.GetChampionMasteriesByChampionResponse], error)
}

// NewMasteriesServiceClient constructs a client for the masteries.MasteriesService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMasteriesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MasteriesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &masteriesServiceClient{
		getChampionMasteriesByPuuid: connect.NewClient[v1.GetChampionMasteriesRequeset, v1.GetChampionMasteriesResponse](
			httpClient,
			baseURL+MasteriesServiceGetChampionMasteriesByPuuidProcedure,
			connect.WithSchema(masteriesServiceGetChampionMasteriesByPuuidMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getChampionMasteriesByPuuidByChampion: connect.NewClient[v1.GetChampionMasteriesByChampionRequeset, v1.GetChampionMasteriesByChampionResponse](
			httpClient,
			baseURL+MasteriesServiceGetChampionMasteriesByPuuidByChampionProcedure,
			connect.WithSchema(masteriesServiceGetChampionMasteriesByPuuidByChampionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// masteriesServiceClient implements MasteriesServiceClient.
type masteriesServiceClient struct {
	getChampionMasteriesByPuuid           *connect.Client[v1.GetChampionMasteriesRequeset, v1.GetChampionMasteriesResponse]
	getChampionMasteriesByPuuidByChampion *connect.Client[v1.GetChampionMasteriesByChampionRequeset, v1.GetChampionMasteriesByChampionResponse]
}

// GetChampionMasteriesByPuuid calls masteries.MasteriesService.GetChampionMasteriesByPuuid.
func (c *masteriesServiceClient) GetChampionMasteriesByPuuid(ctx context.Context, req *connect.Request[v1.GetChampionMasteriesRequeset]) (*connect.Response[v1.GetChampionMasteriesResponse], error) {
	return c.getChampionMasteriesByPuuid.CallUnary(ctx, req)
}

// GetChampionMasteriesByPuuidByChampion calls
// masteries.MasteriesService.GetChampionMasteriesByPuuidByChampion.
func (c *masteriesServiceClient) GetChampionMasteriesByPuuidByChampion(ctx context.Context, req *connect.Request[v1.GetChampionMasteriesByChampionRequeset]) (*connect.Response[v1.GetChampionMasteriesByChampionResponse], error) {
	return c.getChampionMasteriesByPuuidByChampion.CallUnary(ctx, req)
}

// MasteriesServiceHandler is an implementation of the masteries.MasteriesService service.
type MasteriesServiceHandler interface {
	GetChampionMasteriesByPuuid(context.Context, *connect.Request[v1.GetChampionMasteriesRequeset]) (*connect.Response[v1.GetChampionMasteriesResponse], error)
	GetChampionMasteriesByPuuidByChampion(context.Context, *connect.Request[v1.GetChampionMasteriesByChampionRequeset]) (*connect.Response[v1.GetChampionMasteriesByChampionResponse], error)
}

// NewMasteriesServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMasteriesServiceHandler(svc MasteriesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	masteriesServiceGetChampionMasteriesByPuuidHandler := connect.NewUnaryHandler(
		MasteriesServiceGetChampionMasteriesByPuuidProcedure,
		svc.GetChampionMasteriesByPuuid,
		connect.WithSchema(masteriesServiceGetChampionMasteriesByPuuidMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	masteriesServiceGetChampionMasteriesByPuuidByChampionHandler := connect.NewUnaryHandler(
		MasteriesServiceGetChampionMasteriesByPuuidByChampionProcedure,
		svc.GetChampionMasteriesByPuuidByChampion,
		connect.WithSchema(masteriesServiceGetChampionMasteriesByPuuidByChampionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/masteries.MasteriesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MasteriesServiceGetChampionMasteriesByPuuidProcedure:
			masteriesServiceGetChampionMasteriesByPuuidHandler.ServeHTTP(w, r)
		case MasteriesServiceGetChampionMasteriesByPuuidByChampionProcedure:
			masteriesServiceGetChampionMasteriesByPuuidByChampionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMasteriesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMasteriesServiceHandler struct{}

func (UnimplementedMasteriesServiceHandler) GetChampionMasteriesByPuuid(context.Context, *connect.Request[v1.GetChampionMasteriesRequeset]) (*connect.Response[v1.GetChampionMasteriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("masteries.MasteriesService.GetChampionMasteriesByPuuid is not implemented"))
}

func (UnimplementedMasteriesServiceHandler) GetChampionMasteriesByPuuidByChampion(context.Context, *connect.Request[v1.GetChampionMasteriesByChampionRequeset]) (*connect.Response[v1.GetChampionMasteriesByChampionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("masteries.MasteriesService.GetChampionMasteriesByPuuidByChampion is not implemented"))
}
