// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: champions/v1/champions.proto

package championsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetChampionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PatchVersion string `protobuf:"bytes,1,opt,name=patchVersion,proto3" json:"patchVersion,omitempty"`
}

func (x *GetChampionsRequest) Reset() {
	*x = GetChampionsRequest{}
	mi := &file_champions_v1_champions_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChampionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChampionsRequest) ProtoMessage() {}

func (x *GetChampionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_champions_v1_champions_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChampionsRequest.ProtoReflect.Descriptor instead.
func (*GetChampionsRequest) Descriptor() ([]byte, []int) {
	return file_champions_v1_champions_proto_rawDescGZIP(), []int{0}
}

func (x *GetChampionsRequest) GetPatchVersion() string {
	if x != nil {
		return x.PatchVersion
	}
	return ""
}

type GetChampionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string               `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Format  string               `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	Version string               `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Data    map[string]*Champion `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetChampionsResponse) Reset() {
	*x = GetChampionsResponse{}
	mi := &file_champions_v1_champions_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChampionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChampionsResponse) ProtoMessage() {}

func (x *GetChampionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_champions_v1_champions_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChampionsResponse.ProtoReflect.Descriptor instead.
func (*GetChampionsResponse) Descriptor() ([]byte, []int) {
	return file_champions_v1_champions_proto_rawDescGZIP(), []int{1}
}

func (x *GetChampionsResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetChampionsResponse) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *GetChampionsResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetChampionsResponse) GetData() map[string]*Champion {
	if x != nil {
		return x.Data
	}
	return nil
}

type ChampionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attack     int32 `protobuf:"varint,1,opt,name=attack,proto3" json:"attack,omitempty"`
	Defense    int32 `protobuf:"varint,2,opt,name=defense,proto3" json:"defense,omitempty"`
	Magic      int32 `protobuf:"varint,3,opt,name=magic,proto3" json:"magic,omitempty"`
	Difficulty int32 `protobuf:"varint,4,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
}

func (x *ChampionInfo) Reset() {
	*x = ChampionInfo{}
	mi := &file_champions_v1_champions_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChampionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChampionInfo) ProtoMessage() {}

func (x *ChampionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_champions_v1_champions_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChampionInfo.ProtoReflect.Descriptor instead.
func (*ChampionInfo) Descriptor() ([]byte, []int) {
	return file_champions_v1_champions_proto_rawDescGZIP(), []int{2}
}

func (x *ChampionInfo) GetAttack() int32 {
	if x != nil {
		return x.Attack
	}
	return 0
}

func (x *ChampionInfo) GetDefense() int32 {
	if x != nil {
		return x.Defense
	}
	return 0
}

func (x *ChampionInfo) GetMagic() int32 {
	if x != nil {
		return x.Magic
	}
	return 0
}

func (x *ChampionInfo) GetDifficulty() int32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

type Champion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string         `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Id      string         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Key     string         `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Name    string         `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Title   string         `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Blurb   string         `protobuf:"bytes,6,opt,name=blurb,proto3" json:"blurb,omitempty"`
	Info    *ChampionInfo  `protobuf:"bytes,7,opt,name=info,proto3" json:"info,omitempty"`
	Image   *Image         `protobuf:"bytes,8,opt,name=image,proto3" json:"image,omitempty"`
	Tags    []string       `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty"`
	Partype string         `protobuf:"bytes,10,opt,name=partype,proto3" json:"partype,omitempty"`
	Stats   *ChampionStats `protobuf:"bytes,11,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *Champion) Reset() {
	*x = Champion{}
	mi := &file_champions_v1_champions_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Champion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Champion) ProtoMessage() {}

func (x *Champion) ProtoReflect() protoreflect.Message {
	mi := &file_champions_v1_champions_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Champion.ProtoReflect.Descriptor instead.
func (*Champion) Descriptor() ([]byte, []int) {
	return file_champions_v1_champions_proto_rawDescGZIP(), []int{3}
}

func (x *Champion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Champion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Champion) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Champion) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Champion) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Champion) GetBlurb() string {
	if x != nil {
		return x.Blurb
	}
	return ""
}

func (x *Champion) GetInfo() *ChampionInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Champion) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Champion) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Champion) GetPartype() string {
	if x != nil {
		return x.Partype
	}
	return ""
}

func (x *Champion) GetStats() *ChampionStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type ChampionStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hp                   int32 `protobuf:"varint,1,opt,name=hp,proto3" json:"hp,omitempty"`
	Hpperlevel           int32 `protobuf:"varint,2,opt,name=hpperlevel,proto3" json:"hpperlevel,omitempty"`
	Mp                   int32 `protobuf:"varint,3,opt,name=mp,proto3" json:"mp,omitempty"`
	Mpperlevel           int32 `protobuf:"varint,4,opt,name=mpperlevel,proto3" json:"mpperlevel,omitempty"`
	Movespeed            int32 `protobuf:"varint,5,opt,name=movespeed,proto3" json:"movespeed,omitempty"`
	Armor                int32 `protobuf:"varint,6,opt,name=armor,proto3" json:"armor,omitempty"`
	Armorperlevel        int32 `protobuf:"varint,7,opt,name=armorperlevel,proto3" json:"armorperlevel,omitempty"`
	Spellblock           int32 `protobuf:"varint,8,opt,name=spellblock,proto3" json:"spellblock,omitempty"`
	Spellblockperlevel   int32 `protobuf:"varint,9,opt,name=spellblockperlevel,proto3" json:"spellblockperlevel,omitempty"`
	Attackrange          int32 `protobuf:"varint,10,opt,name=attackrange,proto3" json:"attackrange,omitempty"`
	Hpregen              int32 `protobuf:"varint,11,opt,name=hpregen,proto3" json:"hpregen,omitempty"`
	Hpregenperlevel      int32 `protobuf:"varint,12,opt,name=hpregenperlevel,proto3" json:"hpregenperlevel,omitempty"`
	Mpregen              int32 `protobuf:"varint,13,opt,name=mpregen,proto3" json:"mpregen,omitempty"`
	Mpregenperlevel      int32 `protobuf:"varint,14,opt,name=mpregenperlevel,proto3" json:"mpregenperlevel,omitempty"`
	Crit                 int32 `protobuf:"varint,15,opt,name=crit,proto3" json:"crit,omitempty"`
	Critperlevel         int32 `protobuf:"varint,16,opt,name=critperlevel,proto3" json:"critperlevel,omitempty"`
	Attackdamage         int32 `protobuf:"varint,17,opt,name=attackdamage,proto3" json:"attackdamage,omitempty"`
	Attackdamageperlevel int32 `protobuf:"varint,18,opt,name=attackdamageperlevel,proto3" json:"attackdamageperlevel,omitempty"`
	Attackspeed          int32 `protobuf:"varint,19,opt,name=attackspeed,proto3" json:"attackspeed,omitempty"`
	Attackspeedperlevel  int32 `protobuf:"varint,20,opt,name=attackspeedperlevel,proto3" json:"attackspeedperlevel,omitempty"`
}

func (x *ChampionStats) Reset() {
	*x = ChampionStats{}
	mi := &file_champions_v1_champions_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChampionStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChampionStats) ProtoMessage() {}

func (x *ChampionStats) ProtoReflect() protoreflect.Message {
	mi := &file_champions_v1_champions_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChampionStats.ProtoReflect.Descriptor instead.
func (*ChampionStats) Descriptor() ([]byte, []int) {
	return file_champions_v1_champions_proto_rawDescGZIP(), []int{4}
}

func (x *ChampionStats) GetHp() int32 {
	if x != nil {
		return x.Hp
	}
	return 0
}

func (x *ChampionStats) GetHpperlevel() int32 {
	if x != nil {
		return x.Hpperlevel
	}
	return 0
}

func (x *ChampionStats) GetMp() int32 {
	if x != nil {
		return x.Mp
	}
	return 0
}

func (x *ChampionStats) GetMpperlevel() int32 {
	if x != nil {
		return x.Mpperlevel
	}
	return 0
}

func (x *ChampionStats) GetMovespeed() int32 {
	if x != nil {
		return x.Movespeed
	}
	return 0
}

func (x *ChampionStats) GetArmor() int32 {
	if x != nil {
		return x.Armor
	}
	return 0
}

func (x *ChampionStats) GetArmorperlevel() int32 {
	if x != nil {
		return x.Armorperlevel
	}
	return 0
}

func (x *ChampionStats) GetSpellblock() int32 {
	if x != nil {
		return x.Spellblock
	}
	return 0
}

func (x *ChampionStats) GetSpellblockperlevel() int32 {
	if x != nil {
		return x.Spellblockperlevel
	}
	return 0
}

func (x *ChampionStats) GetAttackrange() int32 {
	if x != nil {
		return x.Attackrange
	}
	return 0
}

func (x *ChampionStats) GetHpregen() int32 {
	if x != nil {
		return x.Hpregen
	}
	return 0
}

func (x *ChampionStats) GetHpregenperlevel() int32 {
	if x != nil {
		return x.Hpregenperlevel
	}
	return 0
}

func (x *ChampionStats) GetMpregen() int32 {
	if x != nil {
		return x.Mpregen
	}
	return 0
}

func (x *ChampionStats) GetMpregenperlevel() int32 {
	if x != nil {
		return x.Mpregenperlevel
	}
	return 0
}

func (x *ChampionStats) GetCrit() int32 {
	if x != nil {
		return x.Crit
	}
	return 0
}

func (x *ChampionStats) GetCritperlevel() int32 {
	if x != nil {
		return x.Critperlevel
	}
	return 0
}

func (x *ChampionStats) GetAttackdamage() int32 {
	if x != nil {
		return x.Attackdamage
	}
	return 0
}

func (x *ChampionStats) GetAttackdamageperlevel() int32 {
	if x != nil {
		return x.Attackdamageperlevel
	}
	return 0
}

func (x *ChampionStats) GetAttackspeed() int32 {
	if x != nil {
		return x.Attackspeed
	}
	return 0
}

func (x *ChampionStats) GetAttackspeedperlevel() int32 {
	if x != nil {
		return x.Attackspeedperlevel
	}
	return 0
}

type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Full   string `protobuf:"bytes,1,opt,name=full,proto3" json:"full,omitempty"`
	Sprite string `protobuf:"bytes,2,opt,name=sprite,proto3" json:"sprite,omitempty"`
	Group  string `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	X      int32  `protobuf:"varint,4,opt,name=x,proto3" json:"x,omitempty"`
	Y      int32  `protobuf:"varint,5,opt,name=y,proto3" json:"y,omitempty"`
	W      int32  `protobuf:"varint,6,opt,name=w,proto3" json:"w,omitempty"`
	H      int32  `protobuf:"varint,7,opt,name=h,proto3" json:"h,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	mi := &file_champions_v1_champions_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_champions_v1_champions_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_champions_v1_champions_proto_rawDescGZIP(), []int{5}
}

func (x *Image) GetFull() string {
	if x != nil {
		return x.Full
	}
	return ""
}

func (x *Image) GetSprite() string {
	if x != nil {
		return x.Sprite
	}
	return ""
}

func (x *Image) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *Image) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Image) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Image) GetW() int32 {
	if x != nil {
		return x.W
	}
	return 0
}

func (x *Image) GetH() int32 {
	if x != nil {
		return x.H
	}
	return 0
}

var File_champions_v1_champions_proto protoreflect.FileDescriptor

var file_champions_v1_champions_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x39, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x63, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x63, 0x68, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe9, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6d,
	0x70, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x4c, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61,
	0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x76, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x65,
	0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x66, 0x65, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x22, 0xb9, 0x02, 0x0a, 0x08, 0x43, 0x68, 0x61,
	0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x6c, 0x75, 0x72, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6c, 0x75, 0x72,
	0x62, 0x12, 0x2b, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6d,
	0x70, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x26,
	0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x22, 0xa7, 0x05, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x68, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x70, 0x70, 0x65, 0x72, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x68, 0x70, 0x70, 0x65,
	0x72, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x70, 0x70, 0x65, 0x72, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x70, 0x70, 0x65,
	0x72, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x6f, 0x76, 0x65, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x72,
	0x6d, 0x6f, 0x72, 0x70, 0x65, 0x72, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x70, 0x65, 0x72, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x2e, 0x0a, 0x12, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x70, 0x65,
	0x72, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x73, 0x70,
	0x65, 0x6c, 0x6c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x70, 0x65, 0x72, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x70, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x68, 0x70, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x0f,
	0x68, 0x70, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x70, 0x65, 0x72, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x68, 0x70, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x70, 0x65,
	0x72, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x70, 0x72, 0x65, 0x67, 0x65,
	0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x70, 0x72, 0x65, 0x67, 0x65, 0x6e,
	0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x70, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x70, 0x65, 0x72, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x70, 0x72, 0x65, 0x67,
	0x65, 0x6e, 0x70, 0x65, 0x72, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72,
	0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x72, 0x69, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x72, 0x69, 0x74, 0x70, 0x65, 0x72, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x72, 0x69, 0x74, 0x70, 0x65, 0x72, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x70, 0x65, 0x72, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x70, 0x65, 0x72, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x13,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x70, 0x65, 0x65, 0x64, 0x70, 0x65, 0x72, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x73, 0x70, 0x65, 0x65, 0x64, 0x70, 0x65, 0x72, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x81,
	0x01, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6c, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x70, 0x72, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70,
	0x72, 0x69, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x01, 0x77, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x01, 0x68, 0x32, 0x65, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3a, 0x5a, 0x38, 0x6d, 0x61, 0x78,
	0x69, 0x73, 0x63, 0x68, 0x6d, 0x61, 0x78, 0x69, 0x2f, 0x6a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x73, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61,
	0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69,
	0x6f, 0x6e, 0x73, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_champions_v1_champions_proto_rawDescOnce sync.Once
	file_champions_v1_champions_proto_rawDescData = file_champions_v1_champions_proto_rawDesc
)

func file_champions_v1_champions_proto_rawDescGZIP() []byte {
	file_champions_v1_champions_proto_rawDescOnce.Do(func() {
		file_champions_v1_champions_proto_rawDescData = protoimpl.X.CompressGZIP(file_champions_v1_champions_proto_rawDescData)
	})
	return file_champions_v1_champions_proto_rawDescData
}

var file_champions_v1_champions_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_champions_v1_champions_proto_goTypes = []any{
	(*GetChampionsRequest)(nil),  // 0: champions.GetChampionsRequest
	(*GetChampionsResponse)(nil), // 1: champions.GetChampionsResponse
	(*ChampionInfo)(nil),         // 2: champions.ChampionInfo
	(*Champion)(nil),             // 3: champions.Champion
	(*ChampionStats)(nil),        // 4: champions.ChampionStats
	(*Image)(nil),                // 5: champions.Image
	nil,                          // 6: champions.GetChampionsResponse.DataEntry
}
var file_champions_v1_champions_proto_depIdxs = []int32{
	6, // 0: champions.GetChampionsResponse.data:type_name -> champions.GetChampionsResponse.DataEntry
	2, // 1: champions.Champion.info:type_name -> champions.ChampionInfo
	5, // 2: champions.Champion.image:type_name -> champions.Image
	4, // 3: champions.Champion.stats:type_name -> champions.ChampionStats
	3, // 4: champions.GetChampionsResponse.DataEntry.value:type_name -> champions.Champion
	0, // 5: champions.ChampionsService.GetChampions:input_type -> champions.GetChampionsRequest
	1, // 6: champions.ChampionsService.GetChampions:output_type -> champions.GetChampionsResponse
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_champions_v1_champions_proto_init() }
func file_champions_v1_champions_proto_init() {
	if File_champions_v1_champions_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_champions_v1_champions_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_champions_v1_champions_proto_goTypes,
		DependencyIndexes: file_champions_v1_champions_proto_depIdxs,
		MessageInfos:      file_champions_v1_champions_proto_msgTypes,
	}.Build()
	File_champions_v1_champions_proto = out.File
	file_champions_v1_champions_proto_rawDesc = nil
	file_champions_v1_champions_proto_goTypes = nil
	file_champions_v1_champions_proto_depIdxs = nil
}
