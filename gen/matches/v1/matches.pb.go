// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: matches/v1/matches.proto

package matchesv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	v1 "maxischmaxi/jstreams-server/gen/account/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetMatchIdsByPuuidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Puuid     string                   `protobuf:"bytes,1,opt,name=puuid,proto3" json:"puuid,omitempty"`
	Region    v1.RegionalRoutingValues `protobuf:"varint,2,opt,name=region,proto3,enum=account.RegionalRoutingValues" json:"region,omitempty"`
	StartTime *string                  `protobuf:"bytes,3,opt,name=startTime,proto3,oneof" json:"startTime,omitempty"`
	EndTime   *string                  `protobuf:"bytes,4,opt,name=endTime,proto3,oneof" json:"endTime,omitempty"`
	Queue     *int32                   `protobuf:"varint,5,opt,name=queue,proto3,oneof" json:"queue,omitempty"`
	Type      *string                  `protobuf:"bytes,6,opt,name=type,proto3,oneof" json:"type,omitempty"`
	Start     *int32                   `protobuf:"varint,7,opt,name=start,proto3,oneof" json:"start,omitempty"`
	Count     *int32                   `protobuf:"varint,8,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *GetMatchIdsByPuuidRequest) Reset() {
	*x = GetMatchIdsByPuuidRequest{}
	mi := &file_matches_v1_matches_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMatchIdsByPuuidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchIdsByPuuidRequest) ProtoMessage() {}

func (x *GetMatchIdsByPuuidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matches_v1_matches_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchIdsByPuuidRequest.ProtoReflect.Descriptor instead.
func (*GetMatchIdsByPuuidRequest) Descriptor() ([]byte, []int) {
	return file_matches_v1_matches_proto_rawDescGZIP(), []int{0}
}

func (x *GetMatchIdsByPuuidRequest) GetPuuid() string {
	if x != nil {
		return x.Puuid
	}
	return ""
}

func (x *GetMatchIdsByPuuidRequest) GetRegion() v1.RegionalRoutingValues {
	if x != nil {
		return x.Region
	}
	return v1.RegionalRoutingValues(0)
}

func (x *GetMatchIdsByPuuidRequest) GetStartTime() string {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return ""
}

func (x *GetMatchIdsByPuuidRequest) GetEndTime() string {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return ""
}

func (x *GetMatchIdsByPuuidRequest) GetQueue() int32 {
	if x != nil && x.Queue != nil {
		return *x.Queue
	}
	return 0
}

func (x *GetMatchIdsByPuuidRequest) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *GetMatchIdsByPuuidRequest) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *GetMatchIdsByPuuidRequest) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type GetMatchIdsByPuuidResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchIds []string `protobuf:"bytes,1,rep,name=matchIds,proto3" json:"matchIds,omitempty"`
}

func (x *GetMatchIdsByPuuidResponse) Reset() {
	*x = GetMatchIdsByPuuidResponse{}
	mi := &file_matches_v1_matches_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMatchIdsByPuuidResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchIdsByPuuidResponse) ProtoMessage() {}

func (x *GetMatchIdsByPuuidResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matches_v1_matches_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchIdsByPuuidResponse.ProtoReflect.Descriptor instead.
func (*GetMatchIdsByPuuidResponse) Descriptor() ([]byte, []int) {
	return file_matches_v1_matches_proto_rawDescGZIP(), []int{1}
}

func (x *GetMatchIdsByPuuidResponse) GetMatchIds() []string {
	if x != nil {
		return x.MatchIds
	}
	return nil
}

type GetMatchByMatchIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId string                   `protobuf:"bytes,1,opt,name=matchId,proto3" json:"matchId,omitempty"`
	Region  v1.RegionalRoutingValues `protobuf:"varint,2,opt,name=region,proto3,enum=account.RegionalRoutingValues" json:"region,omitempty"`
}

func (x *GetMatchByMatchIdRequest) Reset() {
	*x = GetMatchByMatchIdRequest{}
	mi := &file_matches_v1_matches_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMatchByMatchIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchByMatchIdRequest) ProtoMessage() {}

func (x *GetMatchByMatchIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matches_v1_matches_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchByMatchIdRequest.ProtoReflect.Descriptor instead.
func (*GetMatchByMatchIdRequest) Descriptor() ([]byte, []int) {
	return file_matches_v1_matches_proto_rawDescGZIP(), []int{2}
}

func (x *GetMatchByMatchIdRequest) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *GetMatchByMatchIdRequest) GetRegion() v1.RegionalRoutingValues {
	if x != nil {
		return x.Region
	}
	return v1.RegionalRoutingValues(0)
}

type GetMatchByMatchIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match *Match `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
}

func (x *GetMatchByMatchIdResponse) Reset() {
	*x = GetMatchByMatchIdResponse{}
	mi := &file_matches_v1_matches_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMatchByMatchIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchByMatchIdResponse) ProtoMessage() {}

func (x *GetMatchByMatchIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matches_v1_matches_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchByMatchIdResponse.ProtoReflect.Descriptor instead.
func (*GetMatchByMatchIdResponse) Descriptor() ([]byte, []int) {
	return file_matches_v1_matches_proto_rawDescGZIP(), []int{3}
}

func (x *GetMatchByMatchIdResponse) GetMatch() *Match {
	if x != nil {
		return x.Match
	}
	return nil
}

type MatchMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataVersion  string   `protobuf:"bytes,1,opt,name=dataVersion,proto3" json:"dataVersion,omitempty"`
	MatchId      string   `protobuf:"bytes,2,opt,name=matchId,proto3" json:"matchId,omitempty"`
	Participants []string `protobuf:"bytes,3,rep,name=participants,proto3" json:"participants,omitempty"`
}

func (x *MatchMetadata) Reset() {
	*x = MatchMetadata{}
	mi := &file_matches_v1_matches_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchMetadata) ProtoMessage() {}

func (x *MatchMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_matches_v1_matches_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchMetadata.ProtoReflect.Descriptor instead.
func (*MatchMetadata) Descriptor() ([]byte, []int) {
	return file_matches_v1_matches_proto_rawDescGZIP(), []int{4}
}

func (x *MatchMetadata) GetDataVersion() string {
	if x != nil {
		return x.DataVersion
	}
	return ""
}

func (x *MatchMetadata) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *MatchMetadata) GetParticipants() []string {
	if x != nil {
		return x.Participants
	}
	return nil
}

type MatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndOfGameResult    string              `protobuf:"bytes,1,opt,name=endOfGameResult,proto3" json:"endOfGameResult,omitempty"`
	GameCreation       int32               `protobuf:"varint,2,opt,name=gameCreation,proto3" json:"gameCreation,omitempty"`
	GameDuration       int32               `protobuf:"varint,3,opt,name=gameDuration,proto3" json:"gameDuration,omitempty"`
	GameEndTimestamp   int32               `protobuf:"varint,4,opt,name=gameEndTimestamp,proto3" json:"gameEndTimestamp,omitempty"`
	GameId             int32               `protobuf:"varint,5,opt,name=gameId,proto3" json:"gameId,omitempty"`
	GameMode           string              `protobuf:"bytes,6,opt,name=gameMode,proto3" json:"gameMode,omitempty"`
	GameName           string              `protobuf:"bytes,7,opt,name=gameName,proto3" json:"gameName,omitempty"`
	GameStartTimestamp int32               `protobuf:"varint,8,opt,name=gameStartTimestamp,proto3" json:"gameStartTimestamp,omitempty"`
	GameType           string              `protobuf:"bytes,9,opt,name=gameType,proto3" json:"gameType,omitempty"`
	GameVersion        string              `protobuf:"bytes,10,opt,name=gameVersion,proto3" json:"gameVersion,omitempty"`
	MapId              int32               `protobuf:"varint,11,opt,name=mapId,proto3" json:"mapId,omitempty"`
	PlatformId         string              `protobuf:"bytes,12,opt,name=platformId,proto3" json:"platformId,omitempty"`
	QueueId            int32               `protobuf:"varint,13,opt,name=queueId,proto3" json:"queueId,omitempty"`
	TournamentCode     string              `protobuf:"bytes,14,opt,name=tournamentCode,proto3" json:"tournamentCode,omitempty"`
	Participants       []*MatchParticipant `protobuf:"bytes,15,rep,name=participants,proto3" json:"participants,omitempty"`
	Teams              []*Team             `protobuf:"bytes,16,rep,name=teams,proto3" json:"teams,omitempty"`
}

func (x *MatchInfo) Reset() {
	*x = MatchInfo{}
	mi := &file_matches_v1_matches_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchInfo) ProtoMessage() {}

func (x *MatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_matches_v1_matches_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchInfo.ProtoReflect.Descriptor instead.
func (*MatchInfo) Descriptor() ([]byte, []int) {
	return file_matches_v1_matches_proto_rawDescGZIP(), []int{5}
}

func (x *MatchInfo) GetEndOfGameResult() string {
	if x != nil {
		return x.EndOfGameResult
	}
	return ""
}

func (x *MatchInfo) GetGameCreation() int32 {
	if x != nil {
		return x.GameCreation
	}
	return 0
}

func (x *MatchInfo) GetGameDuration() int32 {
	if x != nil {
		return x.GameDuration
	}
	return 0
}

func (x *MatchInfo) GetGameEndTimestamp() int32 {
	if x != nil {
		return x.GameEndTimestamp
	}
	return 0
}

func (x *MatchInfo) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *MatchInfo) GetGameMode() string {
	if x != nil {
		return x.GameMode
	}
	return ""
}

func (x *MatchInfo) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *MatchInfo) GetGameStartTimestamp() int32 {
	if x != nil {
		return x.GameStartTimestamp
	}
	return 0
}

func (x *MatchInfo) GetGameType() string {
	if x != nil {
		return x.GameType
	}
	return ""
}

func (x *MatchInfo) GetGameVersion() string {
	if x != nil {
		return x.GameVersion
	}
	return ""
}

func (x *MatchInfo) GetMapId() int32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *MatchInfo) GetPlatformId() string {
	if x != nil {
		return x.PlatformId
	}
	return ""
}

func (x *MatchInfo) GetQueueId() int32 {
	if x != nil {
		return x.QueueId
	}
	return 0
}

func (x *MatchInfo) GetTournamentCode() string {
	if x != nil {
		return x.TournamentCode
	}
	return ""
}

func (x *MatchInfo) GetParticipants() []*MatchParticipant {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *MatchInfo) GetTeams() []*Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

type Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bans       []*Ban       `protobuf:"bytes,1,rep,name=bans,proto3" json:"bans,omitempty"`
	Objectives []*Objective `protobuf:"bytes,2,rep,name=objectives,proto3" json:"objectives,omitempty"`
	TeamId     int32        `protobuf:"varint,3,opt,name=teamId,proto3" json:"teamId,omitempty"`
	Win        bool         `protobuf:"varint,4,opt,name=win,proto3" json:"win,omitempty"`
}

func (x *Team) Reset() {
	*x = Team{}
	mi := &file_matches_v1_matches_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_matches_v1_matches_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_matches_v1_matches_proto_rawDescGZIP(), []int{6}
}

func (x *Team) GetBans() []*Ban {
	if x != nil {
		return x.Bans
	}
	return nil
}

func (x *Team) GetObjectives() []*Objective {
	if x != nil {
		return x.Objectives
	}
	return nil
}

func (x *Team) GetTeamId() int32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *Team) GetWin() bool {
	if x != nil {
		return x.Win
	}
	return false
}

type Ban struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChampionId int32 `protobuf:"varint,1,opt,name=championId,proto3" json:"championId,omitempty"`
	PickTurn   int32 `protobuf:"varint,2,opt,name=pickTurn,proto3" json:"pickTurn,omitempty"`
}

func (x *Ban) Reset() {
	*x = Ban{}
	mi := &file_matches_v1_matches_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ban) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ban) ProtoMessage() {}

func (x *Ban) ProtoReflect() protoreflect.Message {
	mi := &file_matches_v1_matches_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ban.ProtoReflect.Descriptor instead.
func (*Ban) Descriptor() ([]byte, []int) {
	return file_matches_v1_matches_proto_rawDescGZIP(), []int{7}
}

func (x *Ban) GetChampionId() int32 {
	if x != nil {
		return x.ChampionId
	}
	return 0
}

func (x *Ban) GetPickTurn() int32 {
	if x != nil {
		return x.PickTurn
	}
	return 0
}

type Objective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Baron      *ObjectiveTarget `protobuf:"bytes,1,opt,name=baron,proto3" json:"baron,omitempty"`
	Champion   *ObjectiveTarget `protobuf:"bytes,2,opt,name=champion,proto3" json:"champion,omitempty"`
	Dragon     *ObjectiveTarget `protobuf:"bytes,3,opt,name=dragon,proto3" json:"dragon,omitempty"`
	Horde      *ObjectiveTarget `protobuf:"bytes,4,opt,name=horde,proto3" json:"horde,omitempty"`
	Inhibitor  *ObjectiveTarget `protobuf:"bytes,5,opt,name=inhibitor,proto3" json:"inhibitor,omitempty"`
	RiftHerald *ObjectiveTarget `protobuf:"bytes,6,opt,name=riftHerald,proto3" json:"riftHerald,omitempty"`
	Tower      *ObjectiveTarget `protobuf:"bytes,7,opt,name=tower,proto3" json:"tower,omitempty"`
}

func (x *Objective) Reset() {
	*x = Objective{}
	mi := &file_matches_v1_matches_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Objective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Objective) ProtoMessage() {}

func (x *Objective) ProtoReflect() protoreflect.Message {
	mi := &file_matches_v1_matches_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Objective.ProtoReflect.Descriptor instead.
func (*Objective) Descriptor() ([]byte, []int) {
	return file_matches_v1_matches_proto_rawDescGZIP(), []int{8}
}

func (x *Objective) GetBaron() *ObjectiveTarget {
	if x != nil {
		return x.Baron
	}
	return nil
}

func (x *Objective) GetChampion() *ObjectiveTarget {
	if x != nil {
		return x.Champion
	}
	return nil
}

func (x *Objective) GetDragon() *ObjectiveTarget {
	if x != nil {
		return x.Dragon
	}
	return nil
}

func (x *Objective) GetHorde() *ObjectiveTarget {
	if x != nil {
		return x.Horde
	}
	return nil
}

func (x *Objective) GetInhibitor() *ObjectiveTarget {
	if x != nil {
		return x.Inhibitor
	}
	return nil
}

func (x *Objective) GetRiftHerald() *ObjectiveTarget {
	if x != nil {
		return x.RiftHerald
	}
	return nil
}

func (x *Objective) GetTower() *ObjectiveTarget {
	if x != nil {
		return x.Tower
	}
	return nil
}

type ObjectiveTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	First bool  `protobuf:"varint,1,opt,name=first,proto3" json:"first,omitempty"`
	Kills int32 `protobuf:"varint,2,opt,name=kills,proto3" json:"kills,omitempty"`
}

func (x *ObjectiveTarget) Reset() {
	*x = ObjectiveTarget{}
	mi := &file_matches_v1_matches_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectiveTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectiveTarget) ProtoMessage() {}

func (x *ObjectiveTarget) ProtoReflect() protoreflect.Message {
	mi := &file_matches_v1_matches_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectiveTarget.ProtoReflect.Descriptor instead.
func (*ObjectiveTarget) Descriptor() ([]byte, []int) {
	return file_matches_v1_matches_proto_rawDescGZIP(), []int{9}
}

func (x *ObjectiveTarget) GetFirst() bool {
	if x != nil {
		return x.First
	}
	return false
}

func (x *ObjectiveTarget) GetKills() int32 {
	if x != nil {
		return x.Kills
	}
	return 0
}

type MatchParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllInPings                     int32        `protobuf:"varint,1,opt,name=allInPings,proto3" json:"allInPings,omitempty"`
	AssistMePings                  int32        `protobuf:"varint,2,opt,name=assistMePings,proto3" json:"assistMePings,omitempty"`
	Assists                        int32        `protobuf:"varint,3,opt,name=assists,proto3" json:"assists,omitempty"`
	BaronKills                     int32        `protobuf:"varint,4,opt,name=baronKills,proto3" json:"baronKills,omitempty"`
	BasicPings                     int32        `protobuf:"varint,5,opt,name=basicPings,proto3" json:"basicPings,omitempty"`
	BountyLevel                    int32        `protobuf:"varint,6,opt,name=bountyLevel,proto3" json:"bountyLevel,omitempty"`
	Challanges                     []*Challange `protobuf:"bytes,7,rep,name=challanges,proto3" json:"challanges,omitempty"`
	ChampExperience                int32        `protobuf:"varint,8,opt,name=champExperience,proto3" json:"champExperience,omitempty"`
	ChampLevel                     int32        `protobuf:"varint,9,opt,name=champLevel,proto3" json:"champLevel,omitempty"`
	ChampionId                     int32        `protobuf:"varint,10,opt,name=championId,proto3" json:"championId,omitempty"`
	ChampionName                   string       `protobuf:"bytes,11,opt,name=championName,proto3" json:"championName,omitempty"`
	ChampionTransform              int32        `protobuf:"varint,12,opt,name=championTransform,proto3" json:"championTransform,omitempty"`
	CommandPings                   int32        `protobuf:"varint,13,opt,name=commandPings,proto3" json:"commandPings,omitempty"`
	ConsumablesPurchased           int32        `protobuf:"varint,14,opt,name=consumablesPurchased,proto3" json:"consumablesPurchased,omitempty"`
	DamageDealtToBuildings         int32        `protobuf:"varint,15,opt,name=damageDealtToBuildings,proto3" json:"damageDealtToBuildings,omitempty"`
	DamageDealtToObjectives        int32        `protobuf:"varint,16,opt,name=damageDealtToObjectives,proto3" json:"damageDealtToObjectives,omitempty"`
	DamageDealtToTurrets           int32        `protobuf:"varint,17,opt,name=damageDealtToTurrets,proto3" json:"damageDealtToTurrets,omitempty"`
	DamageSelfMitigated            int32        `protobuf:"varint,18,opt,name=damageSelfMitigated,proto3" json:"damageSelfMitigated,omitempty"`
	DangerPings                    int32        `protobuf:"varint,19,opt,name=dangerPings,proto3" json:"dangerPings,omitempty"`
	Deaths                         int32        `protobuf:"varint,20,opt,name=deaths,proto3" json:"deaths,omitempty"`
	DetectorWardsPlaced            int32        `protobuf:"varint,21,opt,name=detectorWardsPlaced,proto3" json:"detectorWardsPlaced,omitempty"`
	DoubleKills                    int32        `protobuf:"varint,22,opt,name=doubleKills,proto3" json:"doubleKills,omitempty"`
	DragonKills                    int32        `protobuf:"varint,23,opt,name=dragonKills,proto3" json:"dragonKills,omitempty"`
	EligibleForProgression         bool         `protobuf:"varint,24,opt,name=eligibleForProgression,proto3" json:"eligibleForProgression,omitempty"`
	EnemyMissingPings              int32        `protobuf:"varint,25,opt,name=enemyMissingPings,proto3" json:"enemyMissingPings,omitempty"`
	EnemyVisionPings               int32        `protobuf:"varint,26,opt,name=enemyVisionPings,proto3" json:"enemyVisionPings,omitempty"`
	FirstBloodAssist               bool         `protobuf:"varint,27,opt,name=firstBloodAssist,proto3" json:"firstBloodAssist,omitempty"`
	FirstBloodKill                 bool         `protobuf:"varint,28,opt,name=firstBloodKill,proto3" json:"firstBloodKill,omitempty"`
	FirstTowerAssist               bool         `protobuf:"varint,29,opt,name=firstTowerAssist,proto3" json:"firstTowerAssist,omitempty"`
	FirstTowerKill                 bool         `protobuf:"varint,30,opt,name=firstTowerKill,proto3" json:"firstTowerKill,omitempty"`
	GameEndedInEarlySurrender      bool         `protobuf:"varint,31,opt,name=gameEndedInEarlySurrender,proto3" json:"gameEndedInEarlySurrender,omitempty"`
	GameEndedInSurrender           bool         `protobuf:"varint,32,opt,name=gameEndedInSurrender,proto3" json:"gameEndedInSurrender,omitempty"`
	GetBackPings                   int32        `protobuf:"varint,33,opt,name=getBackPings,proto3" json:"getBackPings,omitempty"`
	GoldEarned                     int32        `protobuf:"varint,34,opt,name=goldEarned,proto3" json:"goldEarned,omitempty"`
	GoldSpent                      int32        `protobuf:"varint,35,opt,name=goldSpent,proto3" json:"goldSpent,omitempty"`
	HoldPings                      int32        `protobuf:"varint,36,opt,name=holdPings,proto3" json:"holdPings,omitempty"`
	IndividualPosition             string       `protobuf:"bytes,37,opt,name=individualPosition,proto3" json:"individualPosition,omitempty"`
	InhibitorKills                 int32        `protobuf:"varint,38,opt,name=inhibitorKills,proto3" json:"inhibitorKills,omitempty"`
	InhibitorTakedowns             int32        `protobuf:"varint,39,opt,name=inhibitorTakedowns,proto3" json:"inhibitorTakedowns,omitempty"`
	InhibitorsLost                 int32        `protobuf:"varint,40,opt,name=inhibitorsLost,proto3" json:"inhibitorsLost,omitempty"`
	Item0                          int32        `protobuf:"varint,41,opt,name=item0,proto3" json:"item0,omitempty"`
	Item1                          int32        `protobuf:"varint,42,opt,name=item1,proto3" json:"item1,omitempty"`
	Item2                          int32        `protobuf:"varint,43,opt,name=item2,proto3" json:"item2,omitempty"`
	Item3                          int32        `protobuf:"varint,44,opt,name=item3,proto3" json:"item3,omitempty"`
	Item4                          int32        `protobuf:"varint,45,opt,name=item4,proto3" json:"item4,omitempty"`
	Item5                          int32        `protobuf:"varint,46,opt,name=item5,proto3" json:"item5,omitempty"`
	Item6                          int32        `protobuf:"varint,47,opt,name=item6,proto3" json:"item6,omitempty"`
	ItemsPurchased                 int32        `protobuf:"varint,48,opt,name=itemsPurchased,proto3" json:"itemsPurchased,omitempty"`
	KillingSprees                  int32        `protobuf:"varint,49,opt,name=killingSprees,proto3" json:"killingSprees,omitempty"`
	Kills                          int32        `protobuf:"varint,50,opt,name=kills,proto3" json:"kills,omitempty"`
	Lane                           string       `protobuf:"bytes,51,opt,name=lane,proto3" json:"lane,omitempty"`
	LargestCriticalStrike          int32        `protobuf:"varint,52,opt,name=largestCriticalStrike,proto3" json:"largestCriticalStrike,omitempty"`
	LargestKillingSpree            int32        `protobuf:"varint,53,opt,name=largestKillingSpree,proto3" json:"largestKillingSpree,omitempty"`
	LargestMultiKill               int32        `protobuf:"varint,54,opt,name=largestMultiKill,proto3" json:"largestMultiKill,omitempty"`
	LongestTimeSpentLiving         int32        `protobuf:"varint,55,opt,name=longestTimeSpentLiving,proto3" json:"longestTimeSpentLiving,omitempty"`
	MagicDamageDealt               int32        `protobuf:"varint,56,opt,name=magicDamageDealt,proto3" json:"magicDamageDealt,omitempty"`
	MagicDamageDealtToChampions    int32        `protobuf:"varint,57,opt,name=magicDamageDealtToChampions,proto3" json:"magicDamageDealtToChampions,omitempty"`
	MagicDamageTaken               int32        `protobuf:"varint,58,opt,name=magicDamageTaken,proto3" json:"magicDamageTaken,omitempty"`
	Missions                       []*Mission   `protobuf:"bytes,59,rep,name=missions,proto3" json:"missions,omitempty"`
	NeedVisionPings                int32        `protobuf:"varint,60,opt,name=needVisionPings,proto3" json:"needVisionPings,omitempty"`
	NeutralMinionsKilled           int32        `protobuf:"varint,61,opt,name=neutralMinionsKilled,proto3" json:"neutralMinionsKilled,omitempty"`
	NexusKills                     int32        `protobuf:"varint,62,opt,name=nexusKills,proto3" json:"nexusKills,omitempty"`
	NexusLost                      int32        `protobuf:"varint,63,opt,name=nexusLost,proto3" json:"nexusLost,omitempty"`
	NexusTakedowns                 int32        `protobuf:"varint,64,opt,name=nexusTakedowns,proto3" json:"nexusTakedowns,omitempty"`
	ObjectivesStolen               int32        `protobuf:"varint,65,opt,name=objectivesStolen,proto3" json:"objectivesStolen,omitempty"`
	ObjectivesStolenAssists        int32        `protobuf:"varint,66,opt,name=objectivesStolenAssists,proto3" json:"objectivesStolenAssists,omitempty"`
	OnMyWayPings                   int32        `protobuf:"varint,67,opt,name=onMyWayPings,proto3" json:"onMyWayPings,omitempty"`
	ParticipantId                  int32        `protobuf:"varint,68,opt,name=participantId,proto3" json:"participantId,omitempty"`
	PentaKills                     int32        `protobuf:"varint,69,opt,name=pentaKills,proto3" json:"pentaKills,omitempty"`
	Perks                          []*Perk      `protobuf:"bytes,70,rep,name=perks,proto3" json:"perks,omitempty"`
	PhysicalDamageDealt            int32        `protobuf:"varint,71,opt,name=physicalDamageDealt,proto3" json:"physicalDamageDealt,omitempty"`
	PhysicalDamageDealtToChampions int32        `protobuf:"varint,72,opt,name=physicalDamageDealtToChampions,proto3" json:"physicalDamageDealtToChampions,omitempty"`
	PhysicalDamageTaken            int32        `protobuf:"varint,73,opt,name=physicalDamageTaken,proto3" json:"physicalDamageTaken,omitempty"`
	Placement                      int32        `protobuf:"varint,74,opt,name=placement,proto3" json:"placement,omitempty"`
	PlayerAugment1                 int32        `protobuf:"varint,75,opt,name=playerAugment1,proto3" json:"playerAugment1,omitempty"`
	PlayerAugment2                 int32        `protobuf:"varint,76,opt,name=playerAugment2,proto3" json:"playerAugment2,omitempty"`
	PlayerAugment3                 int32        `protobuf:"varint,77,opt,name=playerAugment3,proto3" json:"playerAugment3,omitempty"`
	PlayerAugment4                 int32        `protobuf:"varint,78,opt,name=playerAugment4,proto3" json:"playerAugment4,omitempty"`
	PlayerAugment5                 int32        `protobuf:"varint,79,opt,name=playerAugment5,proto3" json:"playerAugment5,omitempty"`
	PlayerAugment6                 int32        `protobuf:"varint,80,opt,name=playerAugment6,proto3" json:"playerAugment6,omitempty"`
	PlayerSubteamId                int32        `protobuf:"varint,81,opt,name=playerSubteamId,proto3" json:"playerSubteamId,omitempty"`
	ProfileIcon                    int32        `protobuf:"varint,82,opt,name=profileIcon,proto3" json:"profileIcon,omitempty"`
	PushPings                      int32        `protobuf:"varint,83,opt,name=pushPings,proto3" json:"pushPings,omitempty"`
	Puuid                          string       `protobuf:"bytes,84,opt,name=puuid,proto3" json:"puuid,omitempty"`
	QuadraKills                    int32        `protobuf:"varint,85,opt,name=quadraKills,proto3" json:"quadraKills,omitempty"`
	RiotIdGameName                 string       `protobuf:"bytes,86,opt,name=riotIdGameName,proto3" json:"riotIdGameName,omitempty"`
	RiotIdTagline                  string       `protobuf:"bytes,87,opt,name=riotIdTagline,proto3" json:"riotIdTagline,omitempty"`
	Role                           string       `protobuf:"bytes,88,opt,name=role,proto3" json:"role,omitempty"`
	SightWardsBoughtInGame         int32        `protobuf:"varint,89,opt,name=sightWardsBoughtInGame,proto3" json:"sightWardsBoughtInGame,omitempty"`
	Spell1Casts                    int32        `protobuf:"varint,90,opt,name=spell1Casts,proto3" json:"spell1Casts,omitempty"`
	Spell2Casts                    int32        `protobuf:"varint,91,opt,name=spell2Casts,proto3" json:"spell2Casts,omitempty"`
	Spell3Casts                    int32        `protobuf:"varint,92,opt,name=spell3Casts,proto3" json:"spell3Casts,omitempty"`
	Spell4Casts                    int32        `protobuf:"varint,93,opt,name=spell4Casts,proto3" json:"spell4Casts,omitempty"`
	SubteamPlacement               int32        `protobuf:"varint,94,opt,name=subteamPlacement,proto3" json:"subteamPlacement,omitempty"`
	Summoner1Casts                 int32        `protobuf:"varint,95,opt,name=summoner1Casts,proto3" json:"summoner1Casts,omitempty"`
	Summoner1Id                    int32        `protobuf:"varint,96,opt,name=summoner1Id,proto3" json:"summoner1Id,omitempty"`
	Summoner2Casts                 int32        `protobuf:"varint,97,opt,name=summoner2Casts,proto3" json:"summoner2Casts,omitempty"`
	Summoner2Id                    int32        `protobuf:"varint,98,opt,name=summoner2Id,proto3" json:"summoner2Id,omitempty"`
	SummonerId                     string       `protobuf:"bytes,99,opt,name=summonerId,proto3" json:"summonerId,omitempty"`
	SummonerLevel                  int32        `protobuf:"varint,100,opt,name=summonerLevel,proto3" json:"summonerLevel,omitempty"`
	SummonerName                   string       `protobuf:"bytes,101,opt,name=summonerName,proto3" json:"summonerName,omitempty"`
	TeamEarlySurrendered           bool         `protobuf:"varint,102,opt,name=teamEarlySurrendered,proto3" json:"teamEarlySurrendered,omitempty"`
	TeamId                         int32        `protobuf:"varint,103,opt,name=teamId,proto3" json:"teamId,omitempty"`
	TeamPosition                   string       `protobuf:"bytes,104,opt,name=teamPosition,proto3" json:"teamPosition,omitempty"`
	TimeCCingOthers                int32        `protobuf:"varint,105,opt,name=timeCCingOthers,proto3" json:"timeCCingOthers,omitempty"`
	TimePlayed                     int32        `protobuf:"varint,106,opt,name=timePlayed,proto3" json:"timePlayed,omitempty"`
	TotalAllyJungleMinionsKilled   int32        `protobuf:"varint,107,opt,name=totalAllyJungleMinionsKilled,proto3" json:"totalAllyJungleMinionsKilled,omitempty"`
	TotalDamageDealt               int32        `protobuf:"varint,108,opt,name=totalDamageDealt,proto3" json:"totalDamageDealt,omitempty"`
	TotalDamageDealtToChampions    int32        `protobuf:"varint,109,opt,name=totalDamageDealtToChampions,proto3" json:"totalDamageDealtToChampions,omitempty"`
	TotalDamageShieldedOnTeammates int32        `protobuf:"varint,110,opt,name=totalDamageShieldedOnTeammates,proto3" json:"totalDamageShieldedOnTeammates,omitempty"`
	TotalDamageTaken               int32        `protobuf:"varint,111,opt,name=totalDamageTaken,proto3" json:"totalDamageTaken,omitempty"`
	TotalEnemyJungleMinionsKilled  int32        `protobuf:"varint,112,opt,name=totalEnemyJungleMinionsKilled,proto3" json:"totalEnemyJungleMinionsKilled,omitempty"`
	TotalHeal                      int32        `protobuf:"varint,113,opt,name=totalHeal,proto3" json:"totalHeal,omitempty"`
	TotalHealsOnTeammates          int32        `protobuf:"varint,114,opt,name=totalHealsOnTeammates,proto3" json:"totalHealsOnTeammates,omitempty"`
	TotalMinionsKilled             int32        `protobuf:"varint,115,opt,name=totalMinionsKilled,proto3" json:"totalMinionsKilled,omitempty"`
	TotalTimeCCDealt               int32        `protobuf:"varint,116,opt,name=totalTimeCCDealt,proto3" json:"totalTimeCCDealt,omitempty"`
	TotalTimeSpentDead             int32        `protobuf:"varint,117,opt,name=totalTimeSpentDead,proto3" json:"totalTimeSpentDead,omitempty"`
	TotalUnitsHealed               int32        `protobuf:"varint,118,opt,name=totalUnitsHealed,proto3" json:"totalUnitsHealed,omitempty"`
	TripleKills                    int32        `protobuf:"varint,119,opt,name=tripleKills,proto3" json:"tripleKills,omitempty"`
	TrueDamageDealt                int32        `protobuf:"varint,120,opt,name=trueDamageDealt,proto3" json:"trueDamageDealt,omitempty"`
	TrueDamageDealtToChampions     int32        `protobuf:"varint,121,opt,name=trueDamageDealtToChampions,proto3" json:"trueDamageDealtToChampions,omitempty"`
	TrueDamageTaken                int32        `protobuf:"varint,122,opt,name=trueDamageTaken,proto3" json:"trueDamageTaken,omitempty"`
	TurretKills                    int32        `protobuf:"varint,123,opt,name=turretKills,proto3" json:"turretKills,omitempty"`
	TurretTakedowns                int32        `protobuf:"varint,124,opt,name=turretTakedowns,proto3" json:"turretTakedowns,omitempty"`
	TurretsLost                    int32        `protobuf:"varint,125,opt,name=turretsLost,proto3" json:"turretsLost,omitempty"`
	UnrealKills                    int32        `protobuf:"varint,126,opt,name=unrealKills,proto3" json:"unrealKills,omitempty"`
	VisionClearedPings             int32        `protobuf:"varint,127,opt,name=visionClearedPings,proto3" json:"visionClearedPings,omitempty"`
	VisionScore                    int32        `protobuf:"varint,128,opt,name=visionScore,proto3" json:"visionScore,omitempty"`
	VisionWardsBoughtInGame        int32        `protobuf:"varint,129,opt,name=visionWardsBoughtInGame,proto3" json:"visionWardsBoughtInGame,omitempty"`
	WardsKilled                    int32        `protobuf:"varint,130,opt,name=wardsKilled,proto3" json:"wardsKilled,omitempty"`
	WardsPlaced                    int32        `protobuf:"varint,131,opt,name=wardsPlaced,proto3" json:"wardsPlaced,omitempty"`
	Win                            bool         `protobuf:"varint,132,opt,name=win,proto3" json:"win,omitempty"`
}

func (x *MatchParticipant) Reset() {
	*x = MatchParticipant{}
	mi := &file_matches_v1_matches_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchParticipant) ProtoMessage() {}

func (x *MatchParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_matches_v1_matches_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchParticipant.ProtoReflect.Descriptor instead.
func (*MatchParticipant) Descriptor() ([]byte, []int) {
	return file_matches_v1_matches_proto_rawDescGZIP(), []int{10}
}

func (x *MatchParticipant) GetAllInPings() int32 {
	if x != nil {
		return x.AllInPings
	}
	return 0
}

func (x *MatchParticipant) GetAssistMePings() int32 {
	if x != nil {
		return x.AssistMePings
	}
	return 0
}

func (x *MatchParticipant) GetAssists() int32 {
	if x != nil {
		return x.Assists
	}
	return 0
}

func (x *MatchParticipant) GetBaronKills() int32 {
	if x != nil {
		return x.BaronKills
	}
	return 0
}

func (x *MatchParticipant) GetBasicPings() int32 {
	if x != nil {
		return x.BasicPings
	}
	return 0
}

func (x *MatchParticipant) GetBountyLevel() int32 {
	if x != nil {
		return x.BountyLevel
	}
	return 0
}

func (x *MatchParticipant) GetChallanges() []*Challange {
	if x != nil {
		return x.Challanges
	}
	return nil
}

func (x *MatchParticipant) GetChampExperience() int32 {
	if x != nil {
		return x.ChampExperience
	}
	return 0
}

func (x *MatchParticipant) GetChampLevel() int32 {
	if x != nil {
		return x.ChampLevel
	}
	return 0
}

func (x *MatchParticipant) GetChampionId() int32 {
	if x != nil {
		return x.ChampionId
	}
	return 0
}

func (x *MatchParticipant) GetChampionName() string {
	if x != nil {
		return x.ChampionName
	}
	return ""
}

func (x *MatchParticipant) GetChampionTransform() int32 {
	if x != nil {
		return x.ChampionTransform
	}
	return 0
}

func (x *MatchParticipant) GetCommandPings() int32 {
	if x != nil {
		return x.CommandPings
	}
	return 0
}

func (x *MatchParticipant) GetConsumablesPurchased() int32 {
	if x != nil {
		return x.ConsumablesPurchased
	}
	return 0
}

func (x *MatchParticipant) GetDamageDealtToBuildings() int32 {
	if x != nil {
		return x.DamageDealtToBuildings
	}
	return 0
}

func (x *MatchParticipant) GetDamageDealtToObjectives() int32 {
	if x != nil {
		return x.DamageDealtToObjectives
	}
	return 0
}

func (x *MatchParticipant) GetDamageDealtToTurrets() int32 {
	if x != nil {
		return x.DamageDealtToTurrets
	}
	return 0
}

func (x *MatchParticipant) GetDamageSelfMitigated() int32 {
	if x != nil {
		return x.DamageSelfMitigated
	}
	return 0
}

func (x *MatchParticipant) GetDangerPings() int32 {
	if x != nil {
		return x.DangerPings
	}
	return 0
}

func (x *MatchParticipant) GetDeaths() int32 {
	if x != nil {
		return x.Deaths
	}
	return 0
}

func (x *MatchParticipant) GetDetectorWardsPlaced() int32 {
	if x != nil {
		return x.DetectorWardsPlaced
	}
	return 0
}

func (x *MatchParticipant) GetDoubleKills() int32 {
	if x != nil {
		return x.DoubleKills
	}
	return 0
}

func (x *MatchParticipant) GetDragonKills() int32 {
	if x != nil {
		return x.DragonKills
	}
	return 0
}

func (x *MatchParticipant) GetEligibleForProgression() bool {
	if x != nil {
		return x.EligibleForProgression
	}
	return false
}

func (x *MatchParticipant) GetEnemyMissingPings() int32 {
	if x != nil {
		return x.EnemyMissingPings
	}
	return 0
}

func (x *MatchParticipant) GetEnemyVisionPings() int32 {
	if x != nil {
		return x.EnemyVisionPings
	}
	return 0
}

func (x *MatchParticipant) GetFirstBloodAssist() bool {
	if x != nil {
		return x.FirstBloodAssist
	}
	return false
}

func (x *MatchParticipant) GetFirstBloodKill() bool {
	if x != nil {
		return x.FirstBloodKill
	}
	return false
}

func (x *MatchParticipant) GetFirstTowerAssist() bool {
	if x != nil {
		return x.FirstTowerAssist
	}
	return false
}

func (x *MatchParticipant) GetFirstTowerKill() bool {
	if x != nil {
		return x.FirstTowerKill
	}
	return false
}

func (x *MatchParticipant) GetGameEndedInEarlySurrender() bool {
	if x != nil {
		return x.GameEndedInEarlySurrender
	}
	return false
}

func (x *MatchParticipant) GetGameEndedInSurrender() bool {
	if x != nil {
		return x.GameEndedInSurrender
	}
	return false
}

func (x *MatchParticipant) GetGetBackPings() int32 {
	if x != nil {
		return x.GetBackPings
	}
	return 0
}

func (x *MatchParticipant) GetGoldEarned() int32 {
	if x != nil {
		return x.GoldEarned
	}
	return 0
}

func (x *MatchParticipant) GetGoldSpent() int32 {
	if x != nil {
		return x.GoldSpent
	}
	return 0
}

func (x *MatchParticipant) GetHoldPings() int32 {
	if x != nil {
		return x.HoldPings
	}
	return 0
}

func (x *MatchParticipant) GetIndividualPosition() string {
	if x != nil {
		return x.IndividualPosition
	}
	return ""
}

func (x *MatchParticipant) GetInhibitorKills() int32 {
	if x != nil {
		return x.InhibitorKills
	}
	return 0
}

func (x *MatchParticipant) GetInhibitorTakedowns() int32 {
	if x != nil {
		return x.InhibitorTakedowns
	}
	return 0
}

func (x *MatchParticipant) GetInhibitorsLost() int32 {
	if x != nil {
		return x.InhibitorsLost
	}
	return 0
}

func (x *MatchParticipant) GetItem0() int32 {
	if x != nil {
		return x.Item0
	}
	return 0
}

func (x *MatchParticipant) GetItem1() int32 {
	if x != nil {
		return x.Item1
	}
	return 0
}

func (x *MatchParticipant) GetItem2() int32 {
	if x != nil {
		return x.Item2
	}
	return 0
}

func (x *MatchParticipant) GetItem3() int32 {
	if x != nil {
		return x.Item3
	}
	return 0
}

func (x *MatchParticipant) GetItem4() int32 {
	if x != nil {
		return x.Item4
	}
	return 0
}

func (x *MatchParticipant) GetItem5() int32 {
	if x != nil {
		return x.Item5
	}
	return 0
}

func (x *MatchParticipant) GetItem6() int32 {
	if x != nil {
		return x.Item6
	}
	return 0
}

func (x *MatchParticipant) GetItemsPurchased() int32 {
	if x != nil {
		return x.ItemsPurchased
	}
	return 0
}

func (x *MatchParticipant) GetKillingSprees() int32 {
	if x != nil {
		return x.KillingSprees
	}
	return 0
}

func (x *MatchParticipant) GetKills() int32 {
	if x != nil {
		return x.Kills
	}
	return 0
}

func (x *MatchParticipant) GetLane() string {
	if x != nil {
		return x.Lane
	}
	return ""
}

func (x *MatchParticipant) GetLargestCriticalStrike() int32 {
	if x != nil {
		return x.LargestCriticalStrike
	}
	return 0
}

func (x *MatchParticipant) GetLargestKillingSpree() int32 {
	if x != nil {
		return x.LargestKillingSpree
	}
	return 0
}

func (x *MatchParticipant) GetLargestMultiKill() int32 {
	if x != nil {
		return x.LargestMultiKill
	}
	return 0
}

func (x *MatchParticipant) GetLongestTimeSpentLiving() int32 {
	if x != nil {
		return x.LongestTimeSpentLiving
	}
	return 0
}

func (x *MatchParticipant) GetMagicDamageDealt() int32 {
	if x != nil {
		return x.MagicDamageDealt
	}
	return 0
}

func (x *MatchParticipant) GetMagicDamageDealtToChampions() int32 {
	if x != nil {
		return x.MagicDamageDealtToChampions
	}
	return 0
}

func (x *MatchParticipant) GetMagicDamageTaken() int32 {
	if x != nil {
		return x.MagicDamageTaken
	}
	return 0
}

func (x *MatchParticipant) GetMissions() []*Mission {
	if x != nil {
		return x.Missions
	}
	return nil
}

func (x *MatchParticipant) GetNeedVisionPings() int32 {
	if x != nil {
		return x.NeedVisionPings
	}
	return 0
}

func (x *MatchParticipant) GetNeutralMinionsKilled() int32 {
	if x != nil {
		return x.NeutralMinionsKilled
	}
	return 0
}

func (x *MatchParticipant) GetNexusKills() int32 {
	if x != nil {
		return x.NexusKills
	}
	return 0
}

func (x *MatchParticipant) GetNexusLost() int32 {
	if x != nil {
		return x.NexusLost
	}
	return 0
}

func (x *MatchParticipant) GetNexusTakedowns() int32 {
	if x != nil {
		return x.NexusTakedowns
	}
	return 0
}

func (x *MatchParticipant) GetObjectivesStolen() int32 {
	if x != nil {
		return x.ObjectivesStolen
	}
	return 0
}

func (x *MatchParticipant) GetObjectivesStolenAssists() int32 {
	if x != nil {
		return x.ObjectivesStolenAssists
	}
	return 0
}

func (x *MatchParticipant) GetOnMyWayPings() int32 {
	if x != nil {
		return x.OnMyWayPings
	}
	return 0
}

func (x *MatchParticipant) GetParticipantId() int32 {
	if x != nil {
		return x.ParticipantId
	}
	return 0
}

func (x *MatchParticipant) GetPentaKills() int32 {
	if x != nil {
		return x.PentaKills
	}
	return 0
}

func (x *MatchParticipant) GetPerks() []*Perk {
	if x != nil {
		return x.Perks
	}
	return nil
}

func (x *MatchParticipant) GetPhysicalDamageDealt() int32 {
	if x != nil {
		return x.PhysicalDamageDealt
	}
	return 0
}

func (x *MatchParticipant) GetPhysicalDamageDealtToChampions() int32 {
	if x != nil {
		return x.PhysicalDamageDealtToChampions
	}
	return 0
}

func (x *MatchParticipant) GetPhysicalDamageTaken() int32 {
	if x != nil {
		return x.PhysicalDamageTaken
	}
	return 0
}

func (x *MatchParticipant) GetPlacement() int32 {
	if x != nil {
		return x.Placement
	}
	return 0
}

func (x *MatchParticipant) GetPlayerAugment1() int32 {
	if x != nil {
		return x.PlayerAugment1
	}
	return 0
}

func (x *MatchParticipant) GetPlayerAugment2() int32 {
	if x != nil {
		return x.PlayerAugment2
	}
	return 0
}

func (x *MatchParticipant) GetPlayerAugment3() int32 {
	if x != nil {
		return x.PlayerAugment3
	}
	return 0
}

func (x *MatchParticipant) GetPlayerAugment4() int32 {
	if x != nil {
		return x.PlayerAugment4
	}
	return 0
}

func (x *MatchParticipant) GetPlayerAugment5() int32 {
	if x != nil {
		return x.PlayerAugment5
	}
	return 0
}

func (x *MatchParticipant) GetPlayerAugment6() int32 {
	if x != nil {
		return x.PlayerAugment6
	}
	return 0
}

func (x *MatchParticipant) GetPlayerSubteamId() int32 {
	if x != nil {
		return x.PlayerSubteamId
	}
	return 0
}

func (x *MatchParticipant) GetProfileIcon() int32 {
	if x != nil {
		return x.ProfileIcon
	}
	return 0
}

func (x *MatchParticipant) GetPushPings() int32 {
	if x != nil {
		return x.PushPings
	}
	return 0
}

func (x *MatchParticipant) GetPuuid() string {
	if x != nil {
		return x.Puuid
	}
	return ""
}

func (x *MatchParticipant) GetQuadraKills() int32 {
	if x != nil {
		return x.QuadraKills
	}
	return 0
}

func (x *MatchParticipant) GetRiotIdGameName() string {
	if x != nil {
		return x.RiotIdGameName
	}
	return ""
}

func (x *MatchParticipant) GetRiotIdTagline() string {
	if x != nil {
		return x.RiotIdTagline
	}
	return ""
}

func (x *MatchParticipant) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *MatchParticipant) GetSightWardsBoughtInGame() int32 {
	if x != nil {
		return x.SightWardsBoughtInGame
	}
	return 0
}

func (x *MatchParticipant) GetSpell1Casts() int32 {
	if x != nil {
		return x.Spell1Casts
	}
	return 0
}

func (x *MatchParticipant) GetSpell2Casts() int32 {
	if x != nil {
		return x.Spell2Casts
	}
	return 0
}

func (x *MatchParticipant) GetSpell3Casts() int32 {
	if x != nil {
		return x.Spell3Casts
	}
	return 0
}

func (x *MatchParticipant) GetSpell4Casts() int32 {
	if x != nil {
		return x.Spell4Casts
	}
	return 0
}

func (x *MatchParticipant) GetSubteamPlacement() int32 {
	if x != nil {
		return x.SubteamPlacement
	}
	return 0
}

func (x *MatchParticipant) GetSummoner1Casts() int32 {
	if x != nil {
		return x.Summoner1Casts
	}
	return 0
}

func (x *MatchParticipant) GetSummoner1Id() int32 {
	if x != nil {
		return x.Summoner1Id
	}
	return 0
}

func (x *MatchParticipant) GetSummoner2Casts() int32 {
	if x != nil {
		return x.Summoner2Casts
	}
	return 0
}

func (x *MatchParticipant) GetSummoner2Id() int32 {
	if x != nil {
		return x.Summoner2Id
	}
	return 0
}

func (x *MatchParticipant) GetSummonerId() string {
	if x != nil {
		return x.SummonerId
	}
	return ""
}

func (x *MatchParticipant) GetSummonerLevel() int32 {
	if x != nil {
		return x.SummonerLevel
	}
	return 0
}

func (x *MatchParticipant) GetSummonerName() string {
	if x != nil {
		return x.SummonerName
	}
	return ""
}

func (x *MatchParticipant) GetTeamEarlySurrendered() bool {
	if x != nil {
		return x.TeamEarlySurrendered
	}
	return false
}

func (x *MatchParticipant) GetTeamId() int32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *MatchParticipant) GetTeamPosition() string {
	if x != nil {
		return x.TeamPosition
	}
	return ""
}

func (x *MatchParticipant) GetTimeCCingOthers() int32 {
	if x != nil {
		return x.TimeCCingOthers
	}
	return 0
}

func (x *MatchParticipant) GetTimePlayed() int32 {
	if x != nil {
		return x.TimePlayed
	}
	return 0
}

func (x *MatchParticipant) GetTotalAllyJungleMinionsKilled() int32 {
	if x != nil {
		return x.TotalAllyJungleMinionsKilled
	}
	return 0
}

func (x *MatchParticipant) GetTotalDamageDealt() int32 {
	if x != nil {
		return x.TotalDamageDealt
	}
	return 0
}

func (x *MatchParticipant) GetTotalDamageDealtToChampions() int32 {
	if x != nil {
		return x.TotalDamageDealtToChampions
	}
	return 0
}

func (x *MatchParticipant) GetTotalDamageShieldedOnTeammates() int32 {
	if x != nil {
		return x.TotalDamageShieldedOnTeammates
	}
	return 0
}

func (x *MatchParticipant) GetTotalDamageTaken() int32 {
	if x != nil {
		return x.TotalDamageTaken
	}
	return 0
}

func (x *MatchParticipant) GetTotalEnemyJungleMinionsKilled() int32 {
	if x != nil {
		return x.TotalEnemyJungleMinionsKilled
	}
	return 0
}

func (x *MatchParticipant) GetTotalHeal() int32 {
	if x != nil {
		return x.TotalHeal
	}
	return 0
}

func (x *MatchParticipant) GetTotalHealsOnTeammates() int32 {
	if x != nil {
		return x.TotalHealsOnTeammates
	}
	return 0
}

func (x *MatchParticipant) GetTotalMinionsKilled() int32 {
	if x != nil {
		return x.TotalMinionsKilled
	}
	return 0
}

func (x *MatchParticipant) GetTotalTimeCCDealt() int32 {
	if x != nil {
		return x.TotalTimeCCDealt
	}
	return 0
}

func (x *MatchParticipant) GetTotalTimeSpentDead() int32 {
	if x != nil {
		return x.TotalTimeSpentDead
	}
	return 0
}

func (x *MatchParticipant) GetTotalUnitsHealed() int32 {
	if x != nil {
		return x.TotalUnitsHealed
	}
	return 0
}

func (x *MatchParticipant) GetTripleKills() int32 {
	if x != nil {
		return x.TripleKills
	}
	return 0
}

func (x *MatchParticipant) GetTrueDamageDealt() int32 {
	if x != nil {
		return x.TrueDamageDealt
	}
	return 0
}

func (x *MatchParticipant) GetTrueDamageDealtToChampions() int32 {
	if x != nil {
		return x.TrueDamageDealtToChampions
	}
	return 0
}

func (x *MatchParticipant) GetTrueDamageTaken() int32 {
	if x != nil {
		return x.TrueDamageTaken
	}
	return 0
}

func (x *MatchParticipant) GetTurretKills() int32 {
	if x != nil {
		return x.TurretKills
	}
	return 0
}

func (x *MatchParticipant) GetTurretTakedowns() int32 {
	if x != nil {
		return x.TurretTakedowns
	}
	return 0
}

func (x *MatchParticipant) GetTurretsLost() int32 {
	if x != nil {
		return x.TurretsLost
	}
	return 0
}

func (x *MatchParticipant) GetUnrealKills() int32 {
	if x != nil {
		return x.UnrealKills
	}
	return 0
}

func (x *MatchParticipant) GetVisionClearedPings() int32 {
	if x != nil {
		return x.VisionClearedPings
	}
	return 0
}

func (x *MatchParticipant) GetVisionScore() int32 {
	if x != nil {
		return x.VisionScore
	}
	return 0
}

func (x *MatchParticipant) GetVisionWardsBoughtInGame() int32 {
	if x != nil {
		return x.VisionWardsBoughtInGame
	}
	return 0
}

func (x *MatchParticipant) GetWardsKilled() int32 {
	if x != nil {
		return x.WardsKilled
	}
	return 0
}

func (x *MatchParticipant) GetWardsPlaced() int32 {
	if x != nil {
		return x.WardsPlaced
	}
	return 0
}

func (x *MatchParticipant) GetWin() bool {
	if x != nil {
		return x.Win
	}
	return false
}

type Perk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatPerks  *StatPerks  `protobuf:"bytes,1,opt,name=statPerks,proto3" json:"statPerks,omitempty"`
	StylePerks *StylePerks `protobuf:"bytes,2,opt,name=stylePerks,proto3" json:"stylePerks,omitempty"`
}

func (x *Perk) Reset() {
	*x = Perk{}
	mi := &file_matches_v1_matches_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Perk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Perk) ProtoMessage() {}

func (x *Perk) ProtoReflect() protoreflect.Message {
	mi := &file_matches_v1_matches_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Perk.ProtoReflect.Descriptor instead.
func (*Perk) Descriptor() ([]byte, []int) {
	return file_matches_v1_matches_proto_rawDescGZIP(), []int{11}
}

func (x *Perk) GetStatPerks() *StatPerks {
	if x != nil {
		return x.StatPerks
	}
	return nil
}

func (x *Perk) GetStylePerks() *StylePerks {
	if x != nil {
		return x.StylePerks
	}
	return nil
}

type StatPerks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Defense int32 `protobuf:"varint,1,opt,name=defense,proto3" json:"defense,omitempty"`
	Flex    int32 `protobuf:"varint,2,opt,name=flex,proto3" json:"flex,omitempty"`
	Offense int32 `protobuf:"varint,3,opt,name=offense,proto3" json:"offense,omitempty"`
}

func (x *StatPerks) Reset() {
	*x = StatPerks{}
	mi := &file_matches_v1_matches_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatPerks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatPerks) ProtoMessage() {}

func (x *StatPerks) ProtoReflect() protoreflect.Message {
	mi := &file_matches_v1_matches_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatPerks.ProtoReflect.Descriptor instead.
func (*StatPerks) Descriptor() ([]byte, []int) {
	return file_matches_v1_matches_proto_rawDescGZIP(), []int{12}
}

func (x *StatPerks) GetDefense() int32 {
	if x != nil {
		return x.Defense
	}
	return 0
}

func (x *StatPerks) GetFlex() int32 {
	if x != nil {
		return x.Flex
	}
	return 0
}

func (x *StatPerks) GetOffense() int32 {
	if x != nil {
		return x.Offense
	}
	return 0
}

type StylePerks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string                `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Selections  []*StylePerkSelection `protobuf:"bytes,2,rep,name=selections,proto3" json:"selections,omitempty"`
	Style       int32                 `protobuf:"varint,3,opt,name=style,proto3" json:"style,omitempty"`
}

func (x *StylePerks) Reset() {
	*x = StylePerks{}
	mi := &file_matches_v1_matches_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StylePerks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StylePerks) ProtoMessage() {}

func (x *StylePerks) ProtoReflect() protoreflect.Message {
	mi := &file_matches_v1_matches_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StylePerks.ProtoReflect.Descriptor instead.
func (*StylePerks) Descriptor() ([]byte, []int) {
	return file_matches_v1_matches_proto_rawDescGZIP(), []int{13}
}

func (x *StylePerks) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *StylePerks) GetSelections() []*StylePerkSelection {
	if x != nil {
		return x.Selections
	}
	return nil
}

func (x *StylePerks) GetStyle() int32 {
	if x != nil {
		return x.Style
	}
	return 0
}

type StylePerkSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Perk int32 `protobuf:"varint,1,opt,name=perk,proto3" json:"perk,omitempty"`
	Var1 int32 `protobuf:"varint,2,opt,name=var1,proto3" json:"var1,omitempty"`
	Var2 int32 `protobuf:"varint,3,opt,name=var2,proto3" json:"var2,omitempty"`
	Var3 int32 `protobuf:"varint,4,opt,name=var3,proto3" json:"var3,omitempty"`
}

func (x *StylePerkSelection) Reset() {
	*x = StylePerkSelection{}
	mi := &file_matches_v1_matches_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StylePerkSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StylePerkSelection) ProtoMessage() {}

func (x *StylePerkSelection) ProtoReflect() protoreflect.Message {
	mi := &file_matches_v1_matches_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StylePerkSelection.ProtoReflect.Descriptor instead.
func (*StylePerkSelection) Descriptor() ([]byte, []int) {
	return file_matches_v1_matches_proto_rawDescGZIP(), []int{14}
}

func (x *StylePerkSelection) GetPerk() int32 {
	if x != nil {
		return x.Perk
	}
	return 0
}

func (x *StylePerkSelection) GetVar1() int32 {
	if x != nil {
		return x.Var1
	}
	return 0
}

func (x *StylePerkSelection) GetVar2() int32 {
	if x != nil {
		return x.Var2
	}
	return 0
}

func (x *StylePerkSelection) GetVar3() int32 {
	if x != nil {
		return x.Var3
	}
	return 0
}

type Mission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerScore0  int32 `protobuf:"varint,1,opt,name=playerScore0,proto3" json:"playerScore0,omitempty"`
	PlayerScore1  int32 `protobuf:"varint,2,opt,name=playerScore1,proto3" json:"playerScore1,omitempty"`
	PlayerScore2  int32 `protobuf:"varint,3,opt,name=playerScore2,proto3" json:"playerScore2,omitempty"`
	PlayerScore3  int32 `protobuf:"varint,4,opt,name=playerScore3,proto3" json:"playerScore3,omitempty"`
	PlayerScore4  int32 `protobuf:"varint,5,opt,name=playerScore4,proto3" json:"playerScore4,omitempty"`
	PlayerScore5  int32 `protobuf:"varint,6,opt,name=playerScore5,proto3" json:"playerScore5,omitempty"`
	PlayerScore6  int32 `protobuf:"varint,7,opt,name=playerScore6,proto3" json:"playerScore6,omitempty"`
	PlayerScore7  int32 `protobuf:"varint,8,opt,name=playerScore7,proto3" json:"playerScore7,omitempty"`
	PlayerScore8  int32 `protobuf:"varint,9,opt,name=playerScore8,proto3" json:"playerScore8,omitempty"`
	PlayerScore9  int32 `protobuf:"varint,10,opt,name=playerScore9,proto3" json:"playerScore9,omitempty"`
	PlayerScore10 int32 `protobuf:"varint,11,opt,name=playerScore10,proto3" json:"playerScore10,omitempty"`
	PlayerScore11 int32 `protobuf:"varint,12,opt,name=playerScore11,proto3" json:"playerScore11,omitempty"`
}

func (x *Mission) Reset() {
	*x = Mission{}
	mi := &file_matches_v1_matches_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mission) ProtoMessage() {}

func (x *Mission) ProtoReflect() protoreflect.Message {
	mi := &file_matches_v1_matches_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mission.ProtoReflect.Descriptor instead.
func (*Mission) Descriptor() ([]byte, []int) {
	return file_matches_v1_matches_proto_rawDescGZIP(), []int{15}
}

func (x *Mission) GetPlayerScore0() int32 {
	if x != nil {
		return x.PlayerScore0
	}
	return 0
}

func (x *Mission) GetPlayerScore1() int32 {
	if x != nil {
		return x.PlayerScore1
	}
	return 0
}

func (x *Mission) GetPlayerScore2() int32 {
	if x != nil {
		return x.PlayerScore2
	}
	return 0
}

func (x *Mission) GetPlayerScore3() int32 {
	if x != nil {
		return x.PlayerScore3
	}
	return 0
}

func (x *Mission) GetPlayerScore4() int32 {
	if x != nil {
		return x.PlayerScore4
	}
	return 0
}

func (x *Mission) GetPlayerScore5() int32 {
	if x != nil {
		return x.PlayerScore5
	}
	return 0
}

func (x *Mission) GetPlayerScore6() int32 {
	if x != nil {
		return x.PlayerScore6
	}
	return 0
}

func (x *Mission) GetPlayerScore7() int32 {
	if x != nil {
		return x.PlayerScore7
	}
	return 0
}

func (x *Mission) GetPlayerScore8() int32 {
	if x != nil {
		return x.PlayerScore8
	}
	return 0
}

func (x *Mission) GetPlayerScore9() int32 {
	if x != nil {
		return x.PlayerScore9
	}
	return 0
}

func (x *Mission) GetPlayerScore10() int32 {
	if x != nil {
		return x.PlayerScore10
	}
	return 0
}

func (x *Mission) GetPlayerScore11() int32 {
	if x != nil {
		return x.PlayerScore11
	}
	return 0
}

type Challange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// int32 12AssistStreakCount = 1;
	HealFromMapSources                       int32 `protobuf:"varint,2,opt,name=HealFromMapSources,proto3" json:"HealFromMapSources,omitempty"`
	InfernalScalePickups                     int32 `protobuf:"varint,3,opt,name=InfernalScalePickups,proto3" json:"InfernalScalePickups,omitempty"`
	SWARM_DefeatAatrox                       int32 `protobuf:"varint,4,opt,name=SWARM_DefeatAatrox,json=SWARMDefeatAatrox,proto3" json:"SWARM_DefeatAatrox,omitempty"`
	SWARM_DefeatBriar                        int32 `protobuf:"varint,5,opt,name=SWARM_DefeatBriar,json=SWARMDefeatBriar,proto3" json:"SWARM_DefeatBriar,omitempty"`
	SWARM_DefeatMiniBosses                   int32 `protobuf:"varint,6,opt,name=SWARM_DefeatMiniBosses,json=SWARMDefeatMiniBosses,proto3" json:"SWARM_DefeatMiniBosses,omitempty"`
	SWARM_EvolveWeapon                       int32 `protobuf:"varint,7,opt,name=SWARM_EvolveWeapon,json=SWARMEvolveWeapon,proto3" json:"SWARM_EvolveWeapon,omitempty"`
	SWARM_Have3Passives                      int32 `protobuf:"varint,8,opt,name=SWARM_Have3Passives,json=SWARMHave3Passives,proto3" json:"SWARM_Have3Passives,omitempty"`
	SWARM_KillEnemy                          int32 `protobuf:"varint,9,opt,name=SWARM_KillEnemy,json=SWARMKillEnemy,proto3" json:"SWARM_KillEnemy,omitempty"`
	SWARM_PickupGold                         int32 `protobuf:"varint,10,opt,name=SWARM_PickupGold,json=SWARMPickupGold,proto3" json:"SWARM_PickupGold,omitempty"`
	SWARM_ReachLevel50                       int32 `protobuf:"varint,11,opt,name=SWARM_ReachLevel50,json=SWARMReachLevel50,proto3" json:"SWARM_ReachLevel50,omitempty"`
	SWARM_Survive15Min                       int32 `protobuf:"varint,12,opt,name=SWARM_Survive15Min,json=SWARMSurvive15Min,proto3" json:"SWARM_Survive15Min,omitempty"`
	SWARM_WinWith5EvolvedWeapons             int32 `protobuf:"varint,13,opt,name=SWARM_WinWith5EvolvedWeapons,json=SWARMWinWith5EvolvedWeapons,proto3" json:"SWARM_WinWith5EvolvedWeapons,omitempty"`
	AbilityUses                              int32 `protobuf:"varint,14,opt,name=abilityUses,proto3" json:"abilityUses,omitempty"`
	AcesBefore15Minutes                      int32 `protobuf:"varint,15,opt,name=acesBefore15Minutes,proto3" json:"acesBefore15Minutes,omitempty"`
	AlliedJungleMonsterKills                 int32 `protobuf:"varint,16,opt,name=alliedJungleMonsterKills,proto3" json:"alliedJungleMonsterKills,omitempty"`
	BaronTakedowns                           int32 `protobuf:"varint,17,opt,name=baronTakedowns,proto3" json:"baronTakedowns,omitempty"`
	BlastConeOppositeOpponentCount           int32 `protobuf:"varint,18,opt,name=blastConeOppositeOpponentCount,proto3" json:"blastConeOppositeOpponentCount,omitempty"`
	BountyGold                               int32 `protobuf:"varint,19,opt,name=bountyGold,proto3" json:"bountyGold,omitempty"`
	BuffsStolen                              int32 `protobuf:"varint,20,opt,name=buffsStolen,proto3" json:"buffsStolen,omitempty"`
	CompleteSupportQuestInTime               int32 `protobuf:"varint,21,opt,name=completeSupportQuestInTime,proto3" json:"completeSupportQuestInTime,omitempty"`
	ControlWardsPlaced                       int32 `protobuf:"varint,22,opt,name=controlWardsPlaced,proto3" json:"controlWardsPlaced,omitempty"`
	DamagePerMinute                          int32 `protobuf:"varint,23,opt,name=damagePerMinute,proto3" json:"damagePerMinute,omitempty"`
	DamageTakenOnTeamPercentage              int32 `protobuf:"varint,24,opt,name=damageTakenOnTeamPercentage,proto3" json:"damageTakenOnTeamPercentage,omitempty"`
	DancedWithRiftHerald                     int32 `protobuf:"varint,25,opt,name=dancedWithRiftHerald,proto3" json:"dancedWithRiftHerald,omitempty"`
	DeathsByEnemyChamps                      int32 `protobuf:"varint,26,opt,name=deathsByEnemyChamps,proto3" json:"deathsByEnemyChamps,omitempty"`
	DodgeSkillShotsSmallWindow               int32 `protobuf:"varint,27,opt,name=dodgeSkillShotsSmallWindow,proto3" json:"dodgeSkillShotsSmallWindow,omitempty"`
	DoubleAces                               int32 `protobuf:"varint,28,opt,name=doubleAces,proto3" json:"doubleAces,omitempty"`
	DragonTakedowns                          int32 `protobuf:"varint,29,opt,name=dragonTakedowns,proto3" json:"dragonTakedowns,omitempty"`
	EffectiveHealAndShielding                int32 `protobuf:"varint,30,opt,name=effectiveHealAndShielding,proto3" json:"effectiveHealAndShielding,omitempty"`
	ElderDragonKillsWithOpposingSoul         int32 `protobuf:"varint,31,opt,name=elderDragonKillsWithOpposingSoul,proto3" json:"elderDragonKillsWithOpposingSoul,omitempty"`
	ElderDragonMultikills                    int32 `protobuf:"varint,32,opt,name=elderDragonMultikills,proto3" json:"elderDragonMultikills,omitempty"`
	EnemyChampionImmobilizations             int32 `protobuf:"varint,33,opt,name=enemyChampionImmobilizations,proto3" json:"enemyChampionImmobilizations,omitempty"`
	EnemyJungleMonsterKills                  int32 `protobuf:"varint,34,opt,name=enemyJungleMonsterKills,proto3" json:"enemyJungleMonsterKills,omitempty"`
	EpicMonsterKillsNearEnemyJungler         int32 `protobuf:"varint,35,opt,name=epicMonsterKillsNearEnemyJungler,proto3" json:"epicMonsterKillsNearEnemyJungler,omitempty"`
	EpicMonsterKillsWithin30SecondsOfSpawn   int32 `protobuf:"varint,36,opt,name=epicMonsterKillsWithin30SecondsOfSpawn,proto3" json:"epicMonsterKillsWithin30SecondsOfSpawn,omitempty"`
	EpicMonsterSteals                        int32 `protobuf:"varint,37,opt,name=epicMonsterSteals,proto3" json:"epicMonsterSteals,omitempty"`
	EpicMonsterStolenWithoutSmite            int32 `protobuf:"varint,38,opt,name=epicMonsterStolenWithoutSmite,proto3" json:"epicMonsterStolenWithoutSmite,omitempty"`
	FirstTurretKilled                        int32 `protobuf:"varint,39,opt,name=firstTurretKilled,proto3" json:"firstTurretKilled,omitempty"`
	FistBumpParticipation                    int32 `protobuf:"varint,40,opt,name=fistBumpParticipation,proto3" json:"fistBumpParticipation,omitempty"`
	FlawlessAces                             int32 `protobuf:"varint,41,opt,name=flawlessAces,proto3" json:"flawlessAces,omitempty"`
	FullTeamTakedown                         int32 `protobuf:"varint,42,opt,name=fullTeamTakedown,proto3" json:"fullTeamTakedown,omitempty"`
	GameLength                               int32 `protobuf:"varint,43,opt,name=gameLength,proto3" json:"gameLength,omitempty"`
	GetTakedownsInAllLanesEarlyJungleAsLaner int32 `protobuf:"varint,44,opt,name=getTakedownsInAllLanesEarlyJungleAsLaner,proto3" json:"getTakedownsInAllLanesEarlyJungleAsLaner,omitempty"`
	GoldPerMinute                            int32 `protobuf:"varint,45,opt,name=goldPerMinute,proto3" json:"goldPerMinute,omitempty"`
	HadOpenNexus                             int32 `protobuf:"varint,46,opt,name=hadOpenNexus,proto3" json:"hadOpenNexus,omitempty"`
	ImmobilizeAndKillWithAlly                int32 `protobuf:"varint,47,opt,name=immobilizeAndKillWithAlly,proto3" json:"immobilizeAndKillWithAlly,omitempty"`
	InitialBuffCount                         int32 `protobuf:"varint,48,opt,name=initialBuffCount,proto3" json:"initialBuffCount,omitempty"`
	InitialCrabCount                         int32 `protobuf:"varint,49,opt,name=initialCrabCount,proto3" json:"initialCrabCount,omitempty"`
	JungleCsBefore10Minutes                  int32 `protobuf:"varint,50,opt,name=jungleCsBefore10Minutes,proto3" json:"jungleCsBefore10Minutes,omitempty"`
	JunglerTakedownsNearDamagedEpicMonster   int32 `protobuf:"varint,51,opt,name=junglerTakedownsNearDamagedEpicMonster,proto3" json:"junglerTakedownsNearDamagedEpicMonster,omitempty"`
	KTurretsDestroyedBeforePlatesFall        int32 `protobuf:"varint,52,opt,name=kTurretsDestroyedBeforePlatesFall,proto3" json:"kTurretsDestroyedBeforePlatesFall,omitempty"`
	Kda                                      int32 `protobuf:"varint,53,opt,name=kda,proto3" json:"kda,omitempty"`
	KillAfterHiddenWithAlly                  int32 `protobuf:"varint,54,opt,name=killAfterHiddenWithAlly,proto3" json:"killAfterHiddenWithAlly,omitempty"`
	KillParticipation                        int32 `protobuf:"varint,55,opt,name=killParticipation,proto3" json:"killParticipation,omitempty"`
	KilledChampTookFullTeamDamageSurvived    int32 `protobuf:"varint,56,opt,name=killedChampTookFullTeamDamageSurvived,proto3" json:"killedChampTookFullTeamDamageSurvived,omitempty"`
	KillingSprees                            int32 `protobuf:"varint,57,opt,name=killingSprees,proto3" json:"killingSprees,omitempty"`
	KillsNearEnemyTurret                     int32 `protobuf:"varint,58,opt,name=killsNearEnemyTurret,proto3" json:"killsNearEnemyTurret,omitempty"`
	KillsOnOtherLanesEarlyJungleAsLaner      int32 `protobuf:"varint,59,opt,name=killsOnOtherLanesEarlyJungleAsLaner,proto3" json:"killsOnOtherLanesEarlyJungleAsLaner,omitempty"`
	KillsOnRecentlyHealedByAramPack          int32 `protobuf:"varint,60,opt,name=killsOnRecentlyHealedByAramPack,proto3" json:"killsOnRecentlyHealedByAramPack,omitempty"`
	KillsUnderOwnTurret                      int32 `protobuf:"varint,61,opt,name=killsUnderOwnTurret,proto3" json:"killsUnderOwnTurret,omitempty"`
	KillsWithHelpFromEpicMonster             int32 `protobuf:"varint,62,opt,name=killsWithHelpFromEpicMonster,proto3" json:"killsWithHelpFromEpicMonster,omitempty"`
	KnockEnemyIntoTeamAndKill                int32 `protobuf:"varint,63,opt,name=knockEnemyIntoTeamAndKill,proto3" json:"knockEnemyIntoTeamAndKill,omitempty"`
	LandSkillShotsEarlyGame                  int32 `protobuf:"varint,64,opt,name=landSkillShotsEarlyGame,proto3" json:"landSkillShotsEarlyGame,omitempty"`
	LaneMinionsFirst10Minutes                int32 `protobuf:"varint,65,opt,name=laneMinionsFirst10Minutes,proto3" json:"laneMinionsFirst10Minutes,omitempty"`
	LegendaryCount                           int32 `protobuf:"varint,66,opt,name=legendaryCount,proto3" json:"legendaryCount,omitempty"`
	LegendaryItemUsed                        int32 `protobuf:"varint,67,opt,name=legendaryItemUsed,proto3" json:"legendaryItemUsed,omitempty"`
	LostAnInhibitor                          int32 `protobuf:"varint,68,opt,name=lostAnInhibitor,proto3" json:"lostAnInhibitor,omitempty"`
	MaxKillDeficit                           int32 `protobuf:"varint,69,opt,name=maxKillDeficit,proto3" json:"maxKillDeficit,omitempty"`
	MejaisFullStackInTime                    int32 `protobuf:"varint,70,opt,name=mejaisFullStackInTime,proto3" json:"mejaisFullStackInTime,omitempty"`
	MoreEnemyJungleThanOpponent              int32 `protobuf:"varint,71,opt,name=moreEnemyJungleThanOpponent,proto3" json:"moreEnemyJungleThanOpponent,omitempty"`
	MultiKillOneSpell                        int32 `protobuf:"varint,72,opt,name=multiKillOneSpell,proto3" json:"multiKillOneSpell,omitempty"`
	MultiTurretRiftHeraldCount               int32 `protobuf:"varint,73,opt,name=multiTurretRiftHeraldCount,proto3" json:"multiTurretRiftHeraldCount,omitempty"`
	Multikills                               int32 `protobuf:"varint,74,opt,name=multikills,proto3" json:"multikills,omitempty"`
	MultikillsAfterAggressiveFlash           int32 `protobuf:"varint,75,opt,name=multikillsAfterAggressiveFlash,proto3" json:"multikillsAfterAggressiveFlash,omitempty"`
	OuterTurretExecutesBefore10Minutes       int32 `protobuf:"varint,76,opt,name=outerTurretExecutesBefore10Minutes,proto3" json:"outerTurretExecutesBefore10Minutes,omitempty"`
	OutnumberedKills                         int32 `protobuf:"varint,77,opt,name=outnumberedKills,proto3" json:"outnumberedKills,omitempty"`
	OutnumberedNexusKill                     int32 `protobuf:"varint,78,opt,name=outnumberedNexusKill,proto3" json:"outnumberedNexusKill,omitempty"`
	PerfectDragonSoulsTaken                  int32 `protobuf:"varint,79,opt,name=perfectDragonSoulsTaken,proto3" json:"perfectDragonSoulsTaken,omitempty"`
	PerfectGame                              int32 `protobuf:"varint,80,opt,name=perfectGame,proto3" json:"perfectGame,omitempty"`
	PickKillWithAlly                         int32 `protobuf:"varint,81,opt,name=pickKillWithAlly,proto3" json:"pickKillWithAlly,omitempty"`
	PoroExplosions                           int32 `protobuf:"varint,82,opt,name=poroExplosions,proto3" json:"poroExplosions,omitempty"`
	QuickCleanse                             int32 `protobuf:"varint,83,opt,name=quickCleanse,proto3" json:"quickCleanse,omitempty"`
	QuickFirstTurret                         int32 `protobuf:"varint,84,opt,name=quickFirstTurret,proto3" json:"quickFirstTurret,omitempty"`
	QuickSoloKills                           int32 `protobuf:"varint,85,opt,name=quickSoloKills,proto3" json:"quickSoloKills,omitempty"`
	RiftHeraldTakedowns                      int32 `protobuf:"varint,86,opt,name=riftHeraldTakedowns,proto3" json:"riftHeraldTakedowns,omitempty"`
	SaveAllyFromDeath                        int32 `protobuf:"varint,87,opt,name=saveAllyFromDeath,proto3" json:"saveAllyFromDeath,omitempty"`
	ScuttleCrabKills                         int32 `protobuf:"varint,88,opt,name=scuttleCrabKills,proto3" json:"scuttleCrabKills,omitempty"`
	ShortestTimeToAceFromFirstTakedown       int32 `protobuf:"varint,89,opt,name=shortestTimeToAceFromFirstTakedown,proto3" json:"shortestTimeToAceFromFirstTakedown,omitempty"`
	SkillshotsDodged                         int32 `protobuf:"varint,90,opt,name=skillshotsDodged,proto3" json:"skillshotsDodged,omitempty"`
	SkillshotsHit                            int32 `protobuf:"varint,91,opt,name=skillshotsHit,proto3" json:"skillshotsHit,omitempty"`
	SnowballsHit                             int32 `protobuf:"varint,92,opt,name=snowballsHit,proto3" json:"snowballsHit,omitempty"`
	SoloBaronKills                           int32 `protobuf:"varint,93,opt,name=soloBaronKills,proto3" json:"soloBaronKills,omitempty"`
	SoloKills                                int32 `protobuf:"varint,94,opt,name=soloKills,proto3" json:"soloKills,omitempty"`
	StealthWardsPlaced                       int32 `protobuf:"varint,95,opt,name=stealthWardsPlaced,proto3" json:"stealthWardsPlaced,omitempty"`
	SurvivedSingleDigitHpCount               int32 `protobuf:"varint,96,opt,name=survivedSingleDigitHpCount,proto3" json:"survivedSingleDigitHpCount,omitempty"`
	SurvivedThreeImmobilizesInFight          int32 `protobuf:"varint,97,opt,name=survivedThreeImmobilizesInFight,proto3" json:"survivedThreeImmobilizesInFight,omitempty"`
	TakedownOnFirstTurret                    int32 `protobuf:"varint,98,opt,name=takedownOnFirstTurret,proto3" json:"takedownOnFirstTurret,omitempty"`
	Takedowns                                int32 `protobuf:"varint,99,opt,name=takedowns,proto3" json:"takedowns,omitempty"`
	TakedownsAfterGainingLevelAdvantage      int32 `protobuf:"varint,100,opt,name=takedownsAfterGainingLevelAdvantage,proto3" json:"takedownsAfterGainingLevelAdvantage,omitempty"`
	TakedownsBeforeJungleMinionSpawn         int32 `protobuf:"varint,101,opt,name=takedownsBeforeJungleMinionSpawn,proto3" json:"takedownsBeforeJungleMinionSpawn,omitempty"`
	TakedownsFirstXMinutes                   int32 `protobuf:"varint,102,opt,name=takedownsFirstXMinutes,proto3" json:"takedownsFirstXMinutes,omitempty"`
	TakedownsInAlcove                        int32 `protobuf:"varint,103,opt,name=takedownsInAlcove,proto3" json:"takedownsInAlcove,omitempty"`
	TakedownsInEnemyFountain                 int32 `protobuf:"varint,104,opt,name=takedownsInEnemyFountain,proto3" json:"takedownsInEnemyFountain,omitempty"`
	TeamBaronKills                           int32 `protobuf:"varint,105,opt,name=teamBaronKills,proto3" json:"teamBaronKills,omitempty"`
	TeamDamagePercentage                     int32 `protobuf:"varint,106,opt,name=teamDamagePercentage,proto3" json:"teamDamagePercentage,omitempty"`
	TeamElderDragonKills                     int32 `protobuf:"varint,107,opt,name=teamElderDragonKills,proto3" json:"teamElderDragonKills,omitempty"`
	TeamRiftHeraldKills                      int32 `protobuf:"varint,108,opt,name=teamRiftHeraldKills,proto3" json:"teamRiftHeraldKills,omitempty"`
	TookLargeDamageSurvived                  int32 `protobuf:"varint,109,opt,name=tookLargeDamageSurvived,proto3" json:"tookLargeDamageSurvived,omitempty"`
	TurretPlatesTaken                        int32 `protobuf:"varint,110,opt,name=turretPlatesTaken,proto3" json:"turretPlatesTaken,omitempty"`
	TurretTakedowns                          int32 `protobuf:"varint,111,opt,name=turretTakedowns,proto3" json:"turretTakedowns,omitempty"`
	TurretsTakenWithRiftHerald               int32 `protobuf:"varint,112,opt,name=turretsTakenWithRiftHerald,proto3" json:"turretsTakenWithRiftHerald,omitempty"`
	TwentyMinionsIn3SecondsCount             int32 `protobuf:"varint,113,opt,name=twentyMinionsIn3SecondsCount,proto3" json:"twentyMinionsIn3SecondsCount,omitempty"`
	TwoWardsOneSweeperCount                  int32 `protobuf:"varint,114,opt,name=twoWardsOneSweeperCount,proto3" json:"twoWardsOneSweeperCount,omitempty"`
	UnseenRecalls                            int32 `protobuf:"varint,115,opt,name=unseenRecalls,proto3" json:"unseenRecalls,omitempty"`
	VisionScorePerMinute                     int32 `protobuf:"varint,116,opt,name=visionScorePerMinute,proto3" json:"visionScorePerMinute,omitempty"`
	VoidMonsterKill                          int32 `protobuf:"varint,117,opt,name=voidMonsterKill,proto3" json:"voidMonsterKill,omitempty"`
	WardTakedowns                            int32 `protobuf:"varint,118,opt,name=wardTakedowns,proto3" json:"wardTakedowns,omitempty"`
	WardTakedownsBefore20M                   int32 `protobuf:"varint,119,opt,name=wardTakedownsBefore20M,proto3" json:"wardTakedownsBefore20M,omitempty"`
	WardsGuarded                             int32 `protobuf:"varint,120,opt,name=wardsGuarded,proto3" json:"wardsGuarded,omitempty"`
}

func (x *Challange) Reset() {
	*x = Challange{}
	mi := &file_matches_v1_matches_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Challange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Challange) ProtoMessage() {}

func (x *Challange) ProtoReflect() protoreflect.Message {
	mi := &file_matches_v1_matches_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Challange.ProtoReflect.Descriptor instead.
func (*Challange) Descriptor() ([]byte, []int) {
	return file_matches_v1_matches_proto_rawDescGZIP(), []int{16}
}

func (x *Challange) GetHealFromMapSources() int32 {
	if x != nil {
		return x.HealFromMapSources
	}
	return 0
}

func (x *Challange) GetInfernalScalePickups() int32 {
	if x != nil {
		return x.InfernalScalePickups
	}
	return 0
}

func (x *Challange) GetSWARM_DefeatAatrox() int32 {
	if x != nil {
		return x.SWARM_DefeatAatrox
	}
	return 0
}

func (x *Challange) GetSWARM_DefeatBriar() int32 {
	if x != nil {
		return x.SWARM_DefeatBriar
	}
	return 0
}

func (x *Challange) GetSWARM_DefeatMiniBosses() int32 {
	if x != nil {
		return x.SWARM_DefeatMiniBosses
	}
	return 0
}

func (x *Challange) GetSWARM_EvolveWeapon() int32 {
	if x != nil {
		return x.SWARM_EvolveWeapon
	}
	return 0
}

func (x *Challange) GetSWARM_Have3Passives() int32 {
	if x != nil {
		return x.SWARM_Have3Passives
	}
	return 0
}

func (x *Challange) GetSWARM_KillEnemy() int32 {
	if x != nil {
		return x.SWARM_KillEnemy
	}
	return 0
}

func (x *Challange) GetSWARM_PickupGold() int32 {
	if x != nil {
		return x.SWARM_PickupGold
	}
	return 0
}

func (x *Challange) GetSWARM_ReachLevel50() int32 {
	if x != nil {
		return x.SWARM_ReachLevel50
	}
	return 0
}

func (x *Challange) GetSWARM_Survive15Min() int32 {
	if x != nil {
		return x.SWARM_Survive15Min
	}
	return 0
}

func (x *Challange) GetSWARM_WinWith5EvolvedWeapons() int32 {
	if x != nil {
		return x.SWARM_WinWith5EvolvedWeapons
	}
	return 0
}

func (x *Challange) GetAbilityUses() int32 {
	if x != nil {
		return x.AbilityUses
	}
	return 0
}

func (x *Challange) GetAcesBefore15Minutes() int32 {
	if x != nil {
		return x.AcesBefore15Minutes
	}
	return 0
}

func (x *Challange) GetAlliedJungleMonsterKills() int32 {
	if x != nil {
		return x.AlliedJungleMonsterKills
	}
	return 0
}

func (x *Challange) GetBaronTakedowns() int32 {
	if x != nil {
		return x.BaronTakedowns
	}
	return 0
}

func (x *Challange) GetBlastConeOppositeOpponentCount() int32 {
	if x != nil {
		return x.BlastConeOppositeOpponentCount
	}
	return 0
}

func (x *Challange) GetBountyGold() int32 {
	if x != nil {
		return x.BountyGold
	}
	return 0
}

func (x *Challange) GetBuffsStolen() int32 {
	if x != nil {
		return x.BuffsStolen
	}
	return 0
}

func (x *Challange) GetCompleteSupportQuestInTime() int32 {
	if x != nil {
		return x.CompleteSupportQuestInTime
	}
	return 0
}

func (x *Challange) GetControlWardsPlaced() int32 {
	if x != nil {
		return x.ControlWardsPlaced
	}
	return 0
}

func (x *Challange) GetDamagePerMinute() int32 {
	if x != nil {
		return x.DamagePerMinute
	}
	return 0
}

func (x *Challange) GetDamageTakenOnTeamPercentage() int32 {
	if x != nil {
		return x.DamageTakenOnTeamPercentage
	}
	return 0
}

func (x *Challange) GetDancedWithRiftHerald() int32 {
	if x != nil {
		return x.DancedWithRiftHerald
	}
	return 0
}

func (x *Challange) GetDeathsByEnemyChamps() int32 {
	if x != nil {
		return x.DeathsByEnemyChamps
	}
	return 0
}

func (x *Challange) GetDodgeSkillShotsSmallWindow() int32 {
	if x != nil {
		return x.DodgeSkillShotsSmallWindow
	}
	return 0
}

func (x *Challange) GetDoubleAces() int32 {
	if x != nil {
		return x.DoubleAces
	}
	return 0
}

func (x *Challange) GetDragonTakedowns() int32 {
	if x != nil {
		return x.DragonTakedowns
	}
	return 0
}

func (x *Challange) GetEffectiveHealAndShielding() int32 {
	if x != nil {
		return x.EffectiveHealAndShielding
	}
	return 0
}

func (x *Challange) GetElderDragonKillsWithOpposingSoul() int32 {
	if x != nil {
		return x.ElderDragonKillsWithOpposingSoul
	}
	return 0
}

func (x *Challange) GetElderDragonMultikills() int32 {
	if x != nil {
		return x.ElderDragonMultikills
	}
	return 0
}

func (x *Challange) GetEnemyChampionImmobilizations() int32 {
	if x != nil {
		return x.EnemyChampionImmobilizations
	}
	return 0
}

func (x *Challange) GetEnemyJungleMonsterKills() int32 {
	if x != nil {
		return x.EnemyJungleMonsterKills
	}
	return 0
}

func (x *Challange) GetEpicMonsterKillsNearEnemyJungler() int32 {
	if x != nil {
		return x.EpicMonsterKillsNearEnemyJungler
	}
	return 0
}

func (x *Challange) GetEpicMonsterKillsWithin30SecondsOfSpawn() int32 {
	if x != nil {
		return x.EpicMonsterKillsWithin30SecondsOfSpawn
	}
	return 0
}

func (x *Challange) GetEpicMonsterSteals() int32 {
	if x != nil {
		return x.EpicMonsterSteals
	}
	return 0
}

func (x *Challange) GetEpicMonsterStolenWithoutSmite() int32 {
	if x != nil {
		return x.EpicMonsterStolenWithoutSmite
	}
	return 0
}

func (x *Challange) GetFirstTurretKilled() int32 {
	if x != nil {
		return x.FirstTurretKilled
	}
	return 0
}

func (x *Challange) GetFistBumpParticipation() int32 {
	if x != nil {
		return x.FistBumpParticipation
	}
	return 0
}

func (x *Challange) GetFlawlessAces() int32 {
	if x != nil {
		return x.FlawlessAces
	}
	return 0
}

func (x *Challange) GetFullTeamTakedown() int32 {
	if x != nil {
		return x.FullTeamTakedown
	}
	return 0
}

func (x *Challange) GetGameLength() int32 {
	if x != nil {
		return x.GameLength
	}
	return 0
}

func (x *Challange) GetGetTakedownsInAllLanesEarlyJungleAsLaner() int32 {
	if x != nil {
		return x.GetTakedownsInAllLanesEarlyJungleAsLaner
	}
	return 0
}

func (x *Challange) GetGoldPerMinute() int32 {
	if x != nil {
		return x.GoldPerMinute
	}
	return 0
}

func (x *Challange) GetHadOpenNexus() int32 {
	if x != nil {
		return x.HadOpenNexus
	}
	return 0
}

func (x *Challange) GetImmobilizeAndKillWithAlly() int32 {
	if x != nil {
		return x.ImmobilizeAndKillWithAlly
	}
	return 0
}

func (x *Challange) GetInitialBuffCount() int32 {
	if x != nil {
		return x.InitialBuffCount
	}
	return 0
}

func (x *Challange) GetInitialCrabCount() int32 {
	if x != nil {
		return x.InitialCrabCount
	}
	return 0
}

func (x *Challange) GetJungleCsBefore10Minutes() int32 {
	if x != nil {
		return x.JungleCsBefore10Minutes
	}
	return 0
}

func (x *Challange) GetJunglerTakedownsNearDamagedEpicMonster() int32 {
	if x != nil {
		return x.JunglerTakedownsNearDamagedEpicMonster
	}
	return 0
}

func (x *Challange) GetKTurretsDestroyedBeforePlatesFall() int32 {
	if x != nil {
		return x.KTurretsDestroyedBeforePlatesFall
	}
	return 0
}

func (x *Challange) GetKda() int32 {
	if x != nil {
		return x.Kda
	}
	return 0
}

func (x *Challange) GetKillAfterHiddenWithAlly() int32 {
	if x != nil {
		return x.KillAfterHiddenWithAlly
	}
	return 0
}

func (x *Challange) GetKillParticipation() int32 {
	if x != nil {
		return x.KillParticipation
	}
	return 0
}

func (x *Challange) GetKilledChampTookFullTeamDamageSurvived() int32 {
	if x != nil {
		return x.KilledChampTookFullTeamDamageSurvived
	}
	return 0
}

func (x *Challange) GetKillingSprees() int32 {
	if x != nil {
		return x.KillingSprees
	}
	return 0
}

func (x *Challange) GetKillsNearEnemyTurret() int32 {
	if x != nil {
		return x.KillsNearEnemyTurret
	}
	return 0
}

func (x *Challange) GetKillsOnOtherLanesEarlyJungleAsLaner() int32 {
	if x != nil {
		return x.KillsOnOtherLanesEarlyJungleAsLaner
	}
	return 0
}

func (x *Challange) GetKillsOnRecentlyHealedByAramPack() int32 {
	if x != nil {
		return x.KillsOnRecentlyHealedByAramPack
	}
	return 0
}

func (x *Challange) GetKillsUnderOwnTurret() int32 {
	if x != nil {
		return x.KillsUnderOwnTurret
	}
	return 0
}

func (x *Challange) GetKillsWithHelpFromEpicMonster() int32 {
	if x != nil {
		return x.KillsWithHelpFromEpicMonster
	}
	return 0
}

func (x *Challange) GetKnockEnemyIntoTeamAndKill() int32 {
	if x != nil {
		return x.KnockEnemyIntoTeamAndKill
	}
	return 0
}

func (x *Challange) GetLandSkillShotsEarlyGame() int32 {
	if x != nil {
		return x.LandSkillShotsEarlyGame
	}
	return 0
}

func (x *Challange) GetLaneMinionsFirst10Minutes() int32 {
	if x != nil {
		return x.LaneMinionsFirst10Minutes
	}
	return 0
}

func (x *Challange) GetLegendaryCount() int32 {
	if x != nil {
		return x.LegendaryCount
	}
	return 0
}

func (x *Challange) GetLegendaryItemUsed() int32 {
	if x != nil {
		return x.LegendaryItemUsed
	}
	return 0
}

func (x *Challange) GetLostAnInhibitor() int32 {
	if x != nil {
		return x.LostAnInhibitor
	}
	return 0
}

func (x *Challange) GetMaxKillDeficit() int32 {
	if x != nil {
		return x.MaxKillDeficit
	}
	return 0
}

func (x *Challange) GetMejaisFullStackInTime() int32 {
	if x != nil {
		return x.MejaisFullStackInTime
	}
	return 0
}

func (x *Challange) GetMoreEnemyJungleThanOpponent() int32 {
	if x != nil {
		return x.MoreEnemyJungleThanOpponent
	}
	return 0
}

func (x *Challange) GetMultiKillOneSpell() int32 {
	if x != nil {
		return x.MultiKillOneSpell
	}
	return 0
}

func (x *Challange) GetMultiTurretRiftHeraldCount() int32 {
	if x != nil {
		return x.MultiTurretRiftHeraldCount
	}
	return 0
}

func (x *Challange) GetMultikills() int32 {
	if x != nil {
		return x.Multikills
	}
	return 0
}

func (x *Challange) GetMultikillsAfterAggressiveFlash() int32 {
	if x != nil {
		return x.MultikillsAfterAggressiveFlash
	}
	return 0
}

func (x *Challange) GetOuterTurretExecutesBefore10Minutes() int32 {
	if x != nil {
		return x.OuterTurretExecutesBefore10Minutes
	}
	return 0
}

func (x *Challange) GetOutnumberedKills() int32 {
	if x != nil {
		return x.OutnumberedKills
	}
	return 0
}

func (x *Challange) GetOutnumberedNexusKill() int32 {
	if x != nil {
		return x.OutnumberedNexusKill
	}
	return 0
}

func (x *Challange) GetPerfectDragonSoulsTaken() int32 {
	if x != nil {
		return x.PerfectDragonSoulsTaken
	}
	return 0
}

func (x *Challange) GetPerfectGame() int32 {
	if x != nil {
		return x.PerfectGame
	}
	return 0
}

func (x *Challange) GetPickKillWithAlly() int32 {
	if x != nil {
		return x.PickKillWithAlly
	}
	return 0
}

func (x *Challange) GetPoroExplosions() int32 {
	if x != nil {
		return x.PoroExplosions
	}
	return 0
}

func (x *Challange) GetQuickCleanse() int32 {
	if x != nil {
		return x.QuickCleanse
	}
	return 0
}

func (x *Challange) GetQuickFirstTurret() int32 {
	if x != nil {
		return x.QuickFirstTurret
	}
	return 0
}

func (x *Challange) GetQuickSoloKills() int32 {
	if x != nil {
		return x.QuickSoloKills
	}
	return 0
}

func (x *Challange) GetRiftHeraldTakedowns() int32 {
	if x != nil {
		return x.RiftHeraldTakedowns
	}
	return 0
}

func (x *Challange) GetSaveAllyFromDeath() int32 {
	if x != nil {
		return x.SaveAllyFromDeath
	}
	return 0
}

func (x *Challange) GetScuttleCrabKills() int32 {
	if x != nil {
		return x.ScuttleCrabKills
	}
	return 0
}

func (x *Challange) GetShortestTimeToAceFromFirstTakedown() int32 {
	if x != nil {
		return x.ShortestTimeToAceFromFirstTakedown
	}
	return 0
}

func (x *Challange) GetSkillshotsDodged() int32 {
	if x != nil {
		return x.SkillshotsDodged
	}
	return 0
}

func (x *Challange) GetSkillshotsHit() int32 {
	if x != nil {
		return x.SkillshotsHit
	}
	return 0
}

func (x *Challange) GetSnowballsHit() int32 {
	if x != nil {
		return x.SnowballsHit
	}
	return 0
}

func (x *Challange) GetSoloBaronKills() int32 {
	if x != nil {
		return x.SoloBaronKills
	}
	return 0
}

func (x *Challange) GetSoloKills() int32 {
	if x != nil {
		return x.SoloKills
	}
	return 0
}

func (x *Challange) GetStealthWardsPlaced() int32 {
	if x != nil {
		return x.StealthWardsPlaced
	}
	return 0
}

func (x *Challange) GetSurvivedSingleDigitHpCount() int32 {
	if x != nil {
		return x.SurvivedSingleDigitHpCount
	}
	return 0
}

func (x *Challange) GetSurvivedThreeImmobilizesInFight() int32 {
	if x != nil {
		return x.SurvivedThreeImmobilizesInFight
	}
	return 0
}

func (x *Challange) GetTakedownOnFirstTurret() int32 {
	if x != nil {
		return x.TakedownOnFirstTurret
	}
	return 0
}

func (x *Challange) GetTakedowns() int32 {
	if x != nil {
		return x.Takedowns
	}
	return 0
}

func (x *Challange) GetTakedownsAfterGainingLevelAdvantage() int32 {
	if x != nil {
		return x.TakedownsAfterGainingLevelAdvantage
	}
	return 0
}

func (x *Challange) GetTakedownsBeforeJungleMinionSpawn() int32 {
	if x != nil {
		return x.TakedownsBeforeJungleMinionSpawn
	}
	return 0
}

func (x *Challange) GetTakedownsFirstXMinutes() int32 {
	if x != nil {
		return x.TakedownsFirstXMinutes
	}
	return 0
}

func (x *Challange) GetTakedownsInAlcove() int32 {
	if x != nil {
		return x.TakedownsInAlcove
	}
	return 0
}

func (x *Challange) GetTakedownsInEnemyFountain() int32 {
	if x != nil {
		return x.TakedownsInEnemyFountain
	}
	return 0
}

func (x *Challange) GetTeamBaronKills() int32 {
	if x != nil {
		return x.TeamBaronKills
	}
	return 0
}

func (x *Challange) GetTeamDamagePercentage() int32 {
	if x != nil {
		return x.TeamDamagePercentage
	}
	return 0
}

func (x *Challange) GetTeamElderDragonKills() int32 {
	if x != nil {
		return x.TeamElderDragonKills
	}
	return 0
}

func (x *Challange) GetTeamRiftHeraldKills() int32 {
	if x != nil {
		return x.TeamRiftHeraldKills
	}
	return 0
}

func (x *Challange) GetTookLargeDamageSurvived() int32 {
	if x != nil {
		return x.TookLargeDamageSurvived
	}
	return 0
}

func (x *Challange) GetTurretPlatesTaken() int32 {
	if x != nil {
		return x.TurretPlatesTaken
	}
	return 0
}

func (x *Challange) GetTurretTakedowns() int32 {
	if x != nil {
		return x.TurretTakedowns
	}
	return 0
}

func (x *Challange) GetTurretsTakenWithRiftHerald() int32 {
	if x != nil {
		return x.TurretsTakenWithRiftHerald
	}
	return 0
}

func (x *Challange) GetTwentyMinionsIn3SecondsCount() int32 {
	if x != nil {
		return x.TwentyMinionsIn3SecondsCount
	}
	return 0
}

func (x *Challange) GetTwoWardsOneSweeperCount() int32 {
	if x != nil {
		return x.TwoWardsOneSweeperCount
	}
	return 0
}

func (x *Challange) GetUnseenRecalls() int32 {
	if x != nil {
		return x.UnseenRecalls
	}
	return 0
}

func (x *Challange) GetVisionScorePerMinute() int32 {
	if x != nil {
		return x.VisionScorePerMinute
	}
	return 0
}

func (x *Challange) GetVoidMonsterKill() int32 {
	if x != nil {
		return x.VoidMonsterKill
	}
	return 0
}

func (x *Challange) GetWardTakedowns() int32 {
	if x != nil {
		return x.WardTakedowns
	}
	return 0
}

func (x *Challange) GetWardTakedownsBefore20M() int32 {
	if x != nil {
		return x.WardTakedownsBefore20M
	}
	return 0
}

func (x *Challange) GetWardsGuarded() int32 {
	if x != nil {
		return x.WardsGuarded
	}
	return 0
}

type Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *Metadata  `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Info     *MatchInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *Match) Reset() {
	*x = Match{}
	mi := &file_matches_v1_matches_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

func (x *Match) ProtoReflect() protoreflect.Message {
	mi := &file_matches_v1_matches_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_matches_v1_matches_proto_rawDescGZIP(), []int{17}
}

func (x *Match) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Match) GetInfo() *MatchInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetMatchTimelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId string                   `protobuf:"bytes,1,opt,name=matchId,proto3" json:"matchId,omitempty"`
	Region  v1.RegionalRoutingValues `protobuf:"varint,2,opt,name=region,proto3,enum=account.RegionalRoutingValues" json:"region,omitempty"`
}

func (x *GetMatchTimelineRequest) Reset() {
	*x = GetMatchTimelineRequest{}
	mi := &file_matches_v1_matches_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMatchTimelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchTimelineRequest) ProtoMessage() {}

func (x *GetMatchTimelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matches_v1_matches_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchTimelineRequest.ProtoReflect.Descriptor instead.
func (*GetMatchTimelineRequest) Descriptor() ([]byte, []int) {
	return file_matches_v1_matches_proto_rawDescGZIP(), []int{18}
}

func (x *GetMatchTimelineRequest) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *GetMatchTimelineRequest) GetRegion() v1.RegionalRoutingValues {
	if x != nil {
		return x.Region
	}
	return v1.RegionalRoutingValues(0)
}

type GetMatchTimelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timeline *Timeline `protobuf:"bytes,1,opt,name=timeline,proto3" json:"timeline,omitempty"`
}

func (x *GetMatchTimelineResponse) Reset() {
	*x = GetMatchTimelineResponse{}
	mi := &file_matches_v1_matches_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMatchTimelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchTimelineResponse) ProtoMessage() {}

func (x *GetMatchTimelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matches_v1_matches_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchTimelineResponse.ProtoReflect.Descriptor instead.
func (*GetMatchTimelineResponse) Descriptor() ([]byte, []int) {
	return file_matches_v1_matches_proto_rawDescGZIP(), []int{19}
}

func (x *GetMatchTimelineResponse) GetTimeline() *Timeline {
	if x != nil {
		return x.Timeline
	}
	return nil
}

type Timeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Info     *Info     `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *Timeline) Reset() {
	*x = Timeline{}
	mi := &file_matches_v1_matches_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Timeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timeline) ProtoMessage() {}

func (x *Timeline) ProtoReflect() protoreflect.Message {
	mi := &file_matches_v1_matches_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timeline.ProtoReflect.Descriptor instead.
func (*Timeline) Descriptor() ([]byte, []int) {
	return file_matches_v1_matches_proto_rawDescGZIP(), []int{20}
}

func (x *Timeline) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Timeline) GetInfo() *Info {
	if x != nil {
		return x.Info
	}
	return nil
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataVersion  string   `protobuf:"bytes,1,opt,name=dataVersion,proto3" json:"dataVersion,omitempty"`
	MatchId      string   `protobuf:"bytes,2,opt,name=matchId,proto3" json:"matchId,omitempty"`
	Participants []string `protobuf:"bytes,3,rep,name=participants,proto3" json:"participants,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_matches_v1_matches_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_matches_v1_matches_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_matches_v1_matches_proto_rawDescGZIP(), []int{21}
}

func (x *Metadata) GetDataVersion() string {
	if x != nil {
		return x.DataVersion
	}
	return ""
}

func (x *Metadata) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *Metadata) GetParticipants() []string {
	if x != nil {
		return x.Participants
	}
	return nil
}

type Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndOfGameResult string         `protobuf:"bytes,1,opt,name=endOfGameResult,proto3" json:"endOfGameResult,omitempty"`
	FrameInterval   int64          `protobuf:"varint,2,opt,name=frameInterval,proto3" json:"frameInterval,omitempty"`
	Frames          []*Frame       `protobuf:"bytes,3,rep,name=frames,proto3" json:"frames,omitempty"`
	GameId          string         `protobuf:"bytes,4,opt,name=gameId,proto3" json:"gameId,omitempty"`
	Participants    []*Participant `protobuf:"bytes,5,rep,name=participants,proto3" json:"participants,omitempty"`
}

func (x *Info) Reset() {
	*x = Info{}
	mi := &file_matches_v1_matches_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Info) ProtoMessage() {}

func (x *Info) ProtoReflect() protoreflect.Message {
	mi := &file_matches_v1_matches_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Info.ProtoReflect.Descriptor instead.
func (*Info) Descriptor() ([]byte, []int) {
	return file_matches_v1_matches_proto_rawDescGZIP(), []int{22}
}

func (x *Info) GetEndOfGameResult() string {
	if x != nil {
		return x.EndOfGameResult
	}
	return ""
}

func (x *Info) GetFrameInterval() int64 {
	if x != nil {
		return x.FrameInterval
	}
	return 0
}

func (x *Info) GetFrames() []*Frame {
	if x != nil {
		return x.Frames
	}
	return nil
}

func (x *Info) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *Info) GetParticipants() []*Participant {
	if x != nil {
		return x.Participants
	}
	return nil
}

type Participant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticipantId int32  `protobuf:"varint,1,opt,name=participantId,proto3" json:"participantId,omitempty"`
	Puuid         string `protobuf:"bytes,2,opt,name=puuid,proto3" json:"puuid,omitempty"`
}

func (x *Participant) Reset() {
	*x = Participant{}
	mi := &file_matches_v1_matches_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Participant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Participant) ProtoMessage() {}

func (x *Participant) ProtoReflect() protoreflect.Message {
	mi := &file_matches_v1_matches_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Participant.ProtoReflect.Descriptor instead.
func (*Participant) Descriptor() ([]byte, []int) {
	return file_matches_v1_matches_proto_rawDescGZIP(), []int{23}
}

func (x *Participant) GetParticipantId() int32 {
	if x != nil {
		return x.ParticipantId
	}
	return 0
}

func (x *Participant) GetPuuid() string {
	if x != nil {
		return x.Puuid
	}
	return ""
}

type Frame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events            []*Event                     `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	Timestamp         int64                        `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ParticipantFrames map[string]*ParticipantFrame `protobuf:"bytes,3,rep,name=participantFrames,proto3" json:"participantFrames,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Frame) Reset() {
	*x = Frame{}
	mi := &file_matches_v1_matches_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Frame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Frame) ProtoMessage() {}

func (x *Frame) ProtoReflect() protoreflect.Message {
	mi := &file_matches_v1_matches_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Frame.ProtoReflect.Descriptor instead.
func (*Frame) Descriptor() ([]byte, []int) {
	return file_matches_v1_matches_proto_rawDescGZIP(), []int{24}
}

func (x *Frame) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Frame) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Frame) GetParticipantFrames() map[string]*ParticipantFrame {
	if x != nil {
		return x.ParticipantFrames
	}
	return nil
}

type ParticipantChampionStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbilityHaste         int32 `protobuf:"varint,1,opt,name=abilityHaste,proto3" json:"abilityHaste,omitempty"`
	AbilityPower         int32 `protobuf:"varint,2,opt,name=abilityPower,proto3" json:"abilityPower,omitempty"`
	Armor                int32 `protobuf:"varint,3,opt,name=armor,proto3" json:"armor,omitempty"`
	ArmorPen             int32 `protobuf:"varint,4,opt,name=armorPen,proto3" json:"armorPen,omitempty"`
	ArmorPenPercent      int32 `protobuf:"varint,5,opt,name=armorPenPercent,proto3" json:"armorPenPercent,omitempty"`
	AttackDamage         int32 `protobuf:"varint,6,opt,name=attackDamage,proto3" json:"attackDamage,omitempty"`
	AttackSpeed          int32 `protobuf:"varint,7,opt,name=attackSpeed,proto3" json:"attackSpeed,omitempty"`
	BonusArmorPenPercent int32 `protobuf:"varint,8,opt,name=bonusArmorPenPercent,proto3" json:"bonusArmorPenPercent,omitempty"`
	BonusMagicPenPercent int32 `protobuf:"varint,9,opt,name=bonusMagicPenPercent,proto3" json:"bonusMagicPenPercent,omitempty"`
	CcReduction          int32 `protobuf:"varint,10,opt,name=ccReduction,proto3" json:"ccReduction,omitempty"`
	CooldownReduction    int32 `protobuf:"varint,11,opt,name=cooldownReduction,proto3" json:"cooldownReduction,omitempty"`
	Health               int32 `protobuf:"varint,12,opt,name=health,proto3" json:"health,omitempty"`
	HealthMax            int32 `protobuf:"varint,13,opt,name=healthMax,proto3" json:"healthMax,omitempty"`
	HealthRegen          int32 `protobuf:"varint,14,opt,name=healthRegen,proto3" json:"healthRegen,omitempty"`
	Lifesteal            int32 `protobuf:"varint,15,opt,name=lifesteal,proto3" json:"lifesteal,omitempty"`
	MagicPen             int32 `protobuf:"varint,16,opt,name=magicPen,proto3" json:"magicPen,omitempty"`
	MagicPenPercent      int32 `protobuf:"varint,17,opt,name=magicPenPercent,proto3" json:"magicPenPercent,omitempty"`
	MagicResist          int32 `protobuf:"varint,18,opt,name=magicResist,proto3" json:"magicResist,omitempty"`
	MovementSpeed        int32 `protobuf:"varint,19,opt,name=movementSpeed,proto3" json:"movementSpeed,omitempty"`
	Omnivamp             int32 `protobuf:"varint,20,opt,name=omnivamp,proto3" json:"omnivamp,omitempty"`
	PhysicalVamp         int32 `protobuf:"varint,21,opt,name=physicalVamp,proto3" json:"physicalVamp,omitempty"`
	Power                int32 `protobuf:"varint,22,opt,name=power,proto3" json:"power,omitempty"`
	PowerMax             int32 `protobuf:"varint,23,opt,name=powerMax,proto3" json:"powerMax,omitempty"`
	PowerRegen           int32 `protobuf:"varint,24,opt,name=powerRegen,proto3" json:"powerRegen,omitempty"`
	SpellVamp            int32 `protobuf:"varint,25,opt,name=spellVamp,proto3" json:"spellVamp,omitempty"`
}

func (x *ParticipantChampionStats) Reset() {
	*x = ParticipantChampionStats{}
	mi := &file_matches_v1_matches_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParticipantChampionStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantChampionStats) ProtoMessage() {}

func (x *ParticipantChampionStats) ProtoReflect() protoreflect.Message {
	mi := &file_matches_v1_matches_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantChampionStats.ProtoReflect.Descriptor instead.
func (*ParticipantChampionStats) Descriptor() ([]byte, []int) {
	return file_matches_v1_matches_proto_rawDescGZIP(), []int{25}
}

func (x *ParticipantChampionStats) GetAbilityHaste() int32 {
	if x != nil {
		return x.AbilityHaste
	}
	return 0
}

func (x *ParticipantChampionStats) GetAbilityPower() int32 {
	if x != nil {
		return x.AbilityPower
	}
	return 0
}

func (x *ParticipantChampionStats) GetArmor() int32 {
	if x != nil {
		return x.Armor
	}
	return 0
}

func (x *ParticipantChampionStats) GetArmorPen() int32 {
	if x != nil {
		return x.ArmorPen
	}
	return 0
}

func (x *ParticipantChampionStats) GetArmorPenPercent() int32 {
	if x != nil {
		return x.ArmorPenPercent
	}
	return 0
}

func (x *ParticipantChampionStats) GetAttackDamage() int32 {
	if x != nil {
		return x.AttackDamage
	}
	return 0
}

func (x *ParticipantChampionStats) GetAttackSpeed() int32 {
	if x != nil {
		return x.AttackSpeed
	}
	return 0
}

func (x *ParticipantChampionStats) GetBonusArmorPenPercent() int32 {
	if x != nil {
		return x.BonusArmorPenPercent
	}
	return 0
}

func (x *ParticipantChampionStats) GetBonusMagicPenPercent() int32 {
	if x != nil {
		return x.BonusMagicPenPercent
	}
	return 0
}

func (x *ParticipantChampionStats) GetCcReduction() int32 {
	if x != nil {
		return x.CcReduction
	}
	return 0
}

func (x *ParticipantChampionStats) GetCooldownReduction() int32 {
	if x != nil {
		return x.CooldownReduction
	}
	return 0
}

func (x *ParticipantChampionStats) GetHealth() int32 {
	if x != nil {
		return x.Health
	}
	return 0
}

func (x *ParticipantChampionStats) GetHealthMax() int32 {
	if x != nil {
		return x.HealthMax
	}
	return 0
}

func (x *ParticipantChampionStats) GetHealthRegen() int32 {
	if x != nil {
		return x.HealthRegen
	}
	return 0
}

func (x *ParticipantChampionStats) GetLifesteal() int32 {
	if x != nil {
		return x.Lifesteal
	}
	return 0
}

func (x *ParticipantChampionStats) GetMagicPen() int32 {
	if x != nil {
		return x.MagicPen
	}
	return 0
}

func (x *ParticipantChampionStats) GetMagicPenPercent() int32 {
	if x != nil {
		return x.MagicPenPercent
	}
	return 0
}

func (x *ParticipantChampionStats) GetMagicResist() int32 {
	if x != nil {
		return x.MagicResist
	}
	return 0
}

func (x *ParticipantChampionStats) GetMovementSpeed() int32 {
	if x != nil {
		return x.MovementSpeed
	}
	return 0
}

func (x *ParticipantChampionStats) GetOmnivamp() int32 {
	if x != nil {
		return x.Omnivamp
	}
	return 0
}

func (x *ParticipantChampionStats) GetPhysicalVamp() int32 {
	if x != nil {
		return x.PhysicalVamp
	}
	return 0
}

func (x *ParticipantChampionStats) GetPower() int32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *ParticipantChampionStats) GetPowerMax() int32 {
	if x != nil {
		return x.PowerMax
	}
	return 0
}

func (x *ParticipantChampionStats) GetPowerRegen() int32 {
	if x != nil {
		return x.PowerRegen
	}
	return 0
}

func (x *ParticipantChampionStats) GetSpellVamp() int32 {
	if x != nil {
		return x.SpellVamp
	}
	return 0
}

type DamageStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MagicDamageDone               int32 `protobuf:"varint,1,opt,name=magicDamageDone,proto3" json:"magicDamageDone,omitempty"`
	MagicDamageDoneToChampions    int32 `protobuf:"varint,2,opt,name=magicDamageDoneToChampions,proto3" json:"magicDamageDoneToChampions,omitempty"`
	MagicDamageTaken              int32 `protobuf:"varint,3,opt,name=magicDamageTaken,proto3" json:"magicDamageTaken,omitempty"`
	PhysicalDamageDone            int32 `protobuf:"varint,4,opt,name=physicalDamageDone,proto3" json:"physicalDamageDone,omitempty"`
	PhysicalDamageDoneToChampions int32 `protobuf:"varint,5,opt,name=physicalDamageDoneToChampions,proto3" json:"physicalDamageDoneToChampions,omitempty"`
	PhysicalDamageTaken           int32 `protobuf:"varint,6,opt,name=physicalDamageTaken,proto3" json:"physicalDamageTaken,omitempty"`
	TotalDamageDone               int32 `protobuf:"varint,7,opt,name=totalDamageDone,proto3" json:"totalDamageDone,omitempty"`
	TotalDamageDoneToChampions    int32 `protobuf:"varint,8,opt,name=totalDamageDoneToChampions,proto3" json:"totalDamageDoneToChampions,omitempty"`
	TotalDamageTaken              int32 `protobuf:"varint,9,opt,name=totalDamageTaken,proto3" json:"totalDamageTaken,omitempty"`
	TrueDamageDone                int32 `protobuf:"varint,10,opt,name=trueDamageDone,proto3" json:"trueDamageDone,omitempty"`
	TrueDamageDoneToChampions     int32 `protobuf:"varint,11,opt,name=trueDamageDoneToChampions,proto3" json:"trueDamageDoneToChampions,omitempty"`
	TrueDamageTaken               int32 `protobuf:"varint,12,opt,name=trueDamageTaken,proto3" json:"trueDamageTaken,omitempty"`
}

func (x *DamageStats) Reset() {
	*x = DamageStats{}
	mi := &file_matches_v1_matches_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DamageStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DamageStats) ProtoMessage() {}

func (x *DamageStats) ProtoReflect() protoreflect.Message {
	mi := &file_matches_v1_matches_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DamageStats.ProtoReflect.Descriptor instead.
func (*DamageStats) Descriptor() ([]byte, []int) {
	return file_matches_v1_matches_proto_rawDescGZIP(), []int{26}
}

func (x *DamageStats) GetMagicDamageDone() int32 {
	if x != nil {
		return x.MagicDamageDone
	}
	return 0
}

func (x *DamageStats) GetMagicDamageDoneToChampions() int32 {
	if x != nil {
		return x.MagicDamageDoneToChampions
	}
	return 0
}

func (x *DamageStats) GetMagicDamageTaken() int32 {
	if x != nil {
		return x.MagicDamageTaken
	}
	return 0
}

func (x *DamageStats) GetPhysicalDamageDone() int32 {
	if x != nil {
		return x.PhysicalDamageDone
	}
	return 0
}

func (x *DamageStats) GetPhysicalDamageDoneToChampions() int32 {
	if x != nil {
		return x.PhysicalDamageDoneToChampions
	}
	return 0
}

func (x *DamageStats) GetPhysicalDamageTaken() int32 {
	if x != nil {
		return x.PhysicalDamageTaken
	}
	return 0
}

func (x *DamageStats) GetTotalDamageDone() int32 {
	if x != nil {
		return x.TotalDamageDone
	}
	return 0
}

func (x *DamageStats) GetTotalDamageDoneToChampions() int32 {
	if x != nil {
		return x.TotalDamageDoneToChampions
	}
	return 0
}

func (x *DamageStats) GetTotalDamageTaken() int32 {
	if x != nil {
		return x.TotalDamageTaken
	}
	return 0
}

func (x *DamageStats) GetTrueDamageDone() int32 {
	if x != nil {
		return x.TrueDamageDone
	}
	return 0
}

func (x *DamageStats) GetTrueDamageDoneToChampions() int32 {
	if x != nil {
		return x.TrueDamageDoneToChampions
	}
	return 0
}

func (x *DamageStats) GetTrueDamageTaken() int32 {
	if x != nil {
		return x.TrueDamageTaken
	}
	return 0
}

type ParticipantFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChampionStats            *ParticipantChampionStats `protobuf:"bytes,2,opt,name=championStats,proto3" json:"championStats,omitempty"`
	CurrentGold              int32                     `protobuf:"varint,3,opt,name=currentGold,proto3" json:"currentGold,omitempty"`
	DamageStats              *DamageStats              `protobuf:"bytes,4,opt,name=damageStats,proto3" json:"damageStats,omitempty"`
	GoldPerSecond            int32                     `protobuf:"varint,5,opt,name=goldPerSecond,proto3" json:"goldPerSecond,omitempty"`
	JungleMinionsKilled      int32                     `protobuf:"varint,6,opt,name=jungleMinionsKilled,proto3" json:"jungleMinionsKilled,omitempty"`
	Level                    int32                     `protobuf:"varint,7,opt,name=level,proto3" json:"level,omitempty"`
	MinionsKilled            int32                     `protobuf:"varint,8,opt,name=minionsKilled,proto3" json:"minionsKilled,omitempty"`
	ParticipantId            int32                     `protobuf:"varint,9,opt,name=participantId,proto3" json:"participantId,omitempty"`
	Position                 *Position                 `protobuf:"bytes,10,opt,name=position,proto3" json:"position,omitempty"`
	TimeEnemySpentControlled int32                     `protobuf:"varint,11,opt,name=timeEnemySpentControlled,proto3" json:"timeEnemySpentControlled,omitempty"`
	TotalGold                int32                     `protobuf:"varint,12,opt,name=totalGold,proto3" json:"totalGold,omitempty"`
	Xp                       int32                     `protobuf:"varint,13,opt,name=xp,proto3" json:"xp,omitempty"`
}

func (x *ParticipantFrame) Reset() {
	*x = ParticipantFrame{}
	mi := &file_matches_v1_matches_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParticipantFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantFrame) ProtoMessage() {}

func (x *ParticipantFrame) ProtoReflect() protoreflect.Message {
	mi := &file_matches_v1_matches_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantFrame.ProtoReflect.Descriptor instead.
func (*ParticipantFrame) Descriptor() ([]byte, []int) {
	return file_matches_v1_matches_proto_rawDescGZIP(), []int{27}
}

func (x *ParticipantFrame) GetChampionStats() *ParticipantChampionStats {
	if x != nil {
		return x.ChampionStats
	}
	return nil
}

func (x *ParticipantFrame) GetCurrentGold() int32 {
	if x != nil {
		return x.CurrentGold
	}
	return 0
}

func (x *ParticipantFrame) GetDamageStats() *DamageStats {
	if x != nil {
		return x.DamageStats
	}
	return nil
}

func (x *ParticipantFrame) GetGoldPerSecond() int32 {
	if x != nil {
		return x.GoldPerSecond
	}
	return 0
}

func (x *ParticipantFrame) GetJungleMinionsKilled() int32 {
	if x != nil {
		return x.JungleMinionsKilled
	}
	return 0
}

func (x *ParticipantFrame) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ParticipantFrame) GetMinionsKilled() int32 {
	if x != nil {
		return x.MinionsKilled
	}
	return 0
}

func (x *ParticipantFrame) GetParticipantId() int32 {
	if x != nil {
		return x.ParticipantId
	}
	return 0
}

func (x *ParticipantFrame) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *ParticipantFrame) GetTimeEnemySpentControlled() int32 {
	if x != nil {
		return x.TimeEnemySpentControlled
	}
	return 0
}

func (x *ParticipantFrame) GetTotalGold() int32 {
	if x != nil {
		return x.TotalGold
	}
	return 0
}

func (x *ParticipantFrame) GetXp() int32 {
	if x != nil {
		return x.Xp
	}
	return 0
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RealTimestamp           int32           `protobuf:"varint,1,opt,name=realTimestamp,proto3" json:"realTimestamp,omitempty"`
	Timestamp               int32           `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type                    string          `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	LevelUpType             string          `protobuf:"bytes,4,opt,name=levelUpType,proto3" json:"levelUpType,omitempty"`
	ParticipantId           int32           `protobuf:"varint,5,opt,name=participantId,proto3" json:"participantId,omitempty"`
	SkillSlot               int32           `protobuf:"varint,6,opt,name=skillSlot,proto3" json:"skillSlot,omitempty"`
	ItemId                  int32           `protobuf:"varint,7,opt,name=itemId,proto3" json:"itemId,omitempty"`
	CreatorId               int32           `protobuf:"varint,8,opt,name=creatorId,proto3" json:"creatorId,omitempty"`
	WardType                string          `protobuf:"bytes,9,opt,name=wardType,proto3" json:"wardType,omitempty"`
	Level                   int32           `protobuf:"varint,10,opt,name=level,proto3" json:"level,omitempty"`
	Bounty                  int32           `protobuf:"varint,11,opt,name=bounty,proto3" json:"bounty,omitempty"`
	KillStreakLength        int32           `protobuf:"varint,12,opt,name=killStreakLength,proto3" json:"killStreakLength,omitempty"`
	KillerId                int32           `protobuf:"varint,13,opt,name=killerId,proto3" json:"killerId,omitempty"`
	Position                *Position       `protobuf:"bytes,14,opt,name=position,proto3" json:"position,omitempty"`
	ShutdownBounty          int32           `protobuf:"varint,15,opt,name=shutdownBounty,proto3" json:"shutdownBounty,omitempty"`
	VictimDamageDealt       []*VictimDamage `protobuf:"bytes,16,rep,name=victimDamageDealt,proto3" json:"victimDamageDealt,omitempty"`
	VictimDamageReceived    []*VictimDamage `protobuf:"bytes,17,rep,name=victimDamageReceived,proto3" json:"victimDamageReceived,omitempty"`
	VictimId                int32           `protobuf:"varint,18,opt,name=victimId,proto3" json:"victimId,omitempty"`
	KillType                string          `protobuf:"bytes,19,opt,name=killType,proto3" json:"killType,omitempty"`
	AssistingParticipantIds []int32         `protobuf:"varint,20,rep,packed,name=assistingParticipantIds,proto3" json:"assistingParticipantIds,omitempty"`
	AfterId                 int32           `protobuf:"varint,21,opt,name=afterId,proto3" json:"afterId,omitempty"`
	BeforeId                int32           `protobuf:"varint,22,opt,name=beforeId,proto3" json:"beforeId,omitempty"`
	GoldGain                int32           `protobuf:"varint,23,opt,name=goldGain,proto3" json:"goldGain,omitempty"`
	KillerTeamId            int32           `protobuf:"varint,24,opt,name=killerTeamId,proto3" json:"killerTeamId,omitempty"`
	MonsterType             string          `protobuf:"bytes,25,opt,name=monsterType,proto3" json:"monsterType,omitempty"`
	MonsterSubType          string          `protobuf:"bytes,26,opt,name=monsterSubType,proto3" json:"monsterSubType,omitempty"`
	LaneType                string          `protobuf:"bytes,27,opt,name=laneType,proto3" json:"laneType,omitempty"`
	TeamId                  int32           `protobuf:"varint,28,opt,name=teamId,proto3" json:"teamId,omitempty"`
	BuildingType            string          `protobuf:"bytes,29,opt,name=buildingType,proto3" json:"buildingType,omitempty"`
	TowerType               string          `protobuf:"bytes,30,opt,name=towerType,proto3" json:"towerType,omitempty"`
	MultiKillLength         int32           `protobuf:"varint,31,opt,name=multiKillLength,proto3" json:"multiKillLength,omitempty"`
	ActualStartTime         int32           `protobuf:"varint,32,opt,name=actualStartTime,proto3" json:"actualStartTime,omitempty"`
	GameId                  int32           `protobuf:"varint,33,opt,name=gameId,proto3" json:"gameId,omitempty"`
	WinningTeam             int32           `protobuf:"varint,34,opt,name=winningTeam,proto3" json:"winningTeam,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_matches_v1_matches_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_matches_v1_matches_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_matches_v1_matches_proto_rawDescGZIP(), []int{28}
}

func (x *Event) GetRealTimestamp() int32 {
	if x != nil {
		return x.RealTimestamp
	}
	return 0
}

func (x *Event) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Event) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Event) GetLevelUpType() string {
	if x != nil {
		return x.LevelUpType
	}
	return ""
}

func (x *Event) GetParticipantId() int32 {
	if x != nil {
		return x.ParticipantId
	}
	return 0
}

func (x *Event) GetSkillSlot() int32 {
	if x != nil {
		return x.SkillSlot
	}
	return 0
}

func (x *Event) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *Event) GetCreatorId() int32 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

func (x *Event) GetWardType() string {
	if x != nil {
		return x.WardType
	}
	return ""
}

func (x *Event) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Event) GetBounty() int32 {
	if x != nil {
		return x.Bounty
	}
	return 0
}

func (x *Event) GetKillStreakLength() int32 {
	if x != nil {
		return x.KillStreakLength
	}
	return 0
}

func (x *Event) GetKillerId() int32 {
	if x != nil {
		return x.KillerId
	}
	return 0
}

func (x *Event) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Event) GetShutdownBounty() int32 {
	if x != nil {
		return x.ShutdownBounty
	}
	return 0
}

func (x *Event) GetVictimDamageDealt() []*VictimDamage {
	if x != nil {
		return x.VictimDamageDealt
	}
	return nil
}

func (x *Event) GetVictimDamageReceived() []*VictimDamage {
	if x != nil {
		return x.VictimDamageReceived
	}
	return nil
}

func (x *Event) GetVictimId() int32 {
	if x != nil {
		return x.VictimId
	}
	return 0
}

func (x *Event) GetKillType() string {
	if x != nil {
		return x.KillType
	}
	return ""
}

func (x *Event) GetAssistingParticipantIds() []int32 {
	if x != nil {
		return x.AssistingParticipantIds
	}
	return nil
}

func (x *Event) GetAfterId() int32 {
	if x != nil {
		return x.AfterId
	}
	return 0
}

func (x *Event) GetBeforeId() int32 {
	if x != nil {
		return x.BeforeId
	}
	return 0
}

func (x *Event) GetGoldGain() int32 {
	if x != nil {
		return x.GoldGain
	}
	return 0
}

func (x *Event) GetKillerTeamId() int32 {
	if x != nil {
		return x.KillerTeamId
	}
	return 0
}

func (x *Event) GetMonsterType() string {
	if x != nil {
		return x.MonsterType
	}
	return ""
}

func (x *Event) GetMonsterSubType() string {
	if x != nil {
		return x.MonsterSubType
	}
	return ""
}

func (x *Event) GetLaneType() string {
	if x != nil {
		return x.LaneType
	}
	return ""
}

func (x *Event) GetTeamId() int32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *Event) GetBuildingType() string {
	if x != nil {
		return x.BuildingType
	}
	return ""
}

func (x *Event) GetTowerType() string {
	if x != nil {
		return x.TowerType
	}
	return ""
}

func (x *Event) GetMultiKillLength() int32 {
	if x != nil {
		return x.MultiKillLength
	}
	return 0
}

func (x *Event) GetActualStartTime() int32 {
	if x != nil {
		return x.ActualStartTime
	}
	return 0
}

func (x *Event) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *Event) GetWinningTeam() int32 {
	if x != nil {
		return x.WinningTeam
	}
	return 0
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	mi := &file_matches_v1_matches_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_matches_v1_matches_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_matches_v1_matches_proto_rawDescGZIP(), []int{29}
}

func (x *Position) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Position) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type VictimDamage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Basic          bool   `protobuf:"varint,1,opt,name=basic,proto3" json:"basic,omitempty"`
	MagicDamage    int32  `protobuf:"varint,2,opt,name=magicDamage,proto3" json:"magicDamage,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ParticipantId  int32  `protobuf:"varint,4,opt,name=participantId,proto3" json:"participantId,omitempty"`
	PhysicalDamage int32  `protobuf:"varint,5,opt,name=physicalDamage,proto3" json:"physicalDamage,omitempty"`
	SpellName      string `protobuf:"bytes,6,opt,name=spellName,proto3" json:"spellName,omitempty"`
	SpellSlot      int32  `protobuf:"varint,7,opt,name=spellSlot,proto3" json:"spellSlot,omitempty"`
	TrueDamage     int32  `protobuf:"varint,8,opt,name=trueDamage,proto3" json:"trueDamage,omitempty"`
	Type           string `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *VictimDamage) Reset() {
	*x = VictimDamage{}
	mi := &file_matches_v1_matches_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VictimDamage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VictimDamage) ProtoMessage() {}

func (x *VictimDamage) ProtoReflect() protoreflect.Message {
	mi := &file_matches_v1_matches_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VictimDamage.ProtoReflect.Descriptor instead.
func (*VictimDamage) Descriptor() ([]byte, []int) {
	return file_matches_v1_matches_proto_rawDescGZIP(), []int{30}
}

func (x *VictimDamage) GetBasic() bool {
	if x != nil {
		return x.Basic
	}
	return false
}

func (x *VictimDamage) GetMagicDamage() int32 {
	if x != nil {
		return x.MagicDamage
	}
	return 0
}

func (x *VictimDamage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VictimDamage) GetParticipantId() int32 {
	if x != nil {
		return x.ParticipantId
	}
	return 0
}

func (x *VictimDamage) GetPhysicalDamage() int32 {
	if x != nil {
		return x.PhysicalDamage
	}
	return 0
}

func (x *VictimDamage) GetSpellName() string {
	if x != nil {
		return x.SpellName
	}
	return ""
}

func (x *VictimDamage) GetSpellSlot() int32 {
	if x != nil {
		return x.SpellSlot
	}
	return 0
}

func (x *VictimDamage) GetTrueDamage() int32 {
	if x != nil {
		return x.TrueDamage
	}
	return 0
}

func (x *VictimDamage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

var File_matches_v1_matches_proto protoreflect.FileDescriptor

var file_matches_v1_matches_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x1a, 0x18, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd6, 0x02,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x73, 0x42, 0x79, 0x50,
	0x75, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x38, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x73, 0x42, 0x79, 0x50, 0x75, 0x75, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x73,
	0x22, 0x6c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x79, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x41,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x79, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x22, 0x6f, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x73, 0x22, 0xc3, 0x04, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x28, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x64, 0x4f, 0x66,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x61,
	0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x67, 0x61,
	0x6d, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x67, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x61,
	0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x67, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x70,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x61,
	0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x04, 0x54, 0x65, 0x61,
	0x6d, 0x12, 0x20, 0x0a, 0x04, 0x62, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x6e, 0x52, 0x04, 0x62,
	0x61, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x77, 0x69,
	0x6e, 0x22, 0x41, 0x0a, 0x03, 0x42, 0x61, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6d,
	0x70, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x68,
	0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x69, 0x63, 0x6b,
	0x54, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x69, 0x63, 0x6b,
	0x54, 0x75, 0x72, 0x6e, 0x22, 0xf5, 0x02, 0x0a, 0x09, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x62, 0x61, 0x72, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x05, 0x62, 0x61, 0x72,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x08,
	0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x06, 0x64, 0x72, 0x61, 0x67,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x06, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x05, 0x68, 0x6f,
	0x72, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x05, 0x68, 0x6f, 0x72, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x69, 0x6e,
	0x68, 0x69, 0x62, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x09, 0x69, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74,
	0x6f, 0x72, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x69, 0x66, 0x74, 0x48, 0x65, 0x72, 0x61, 0x6c, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x0a, 0x72, 0x69, 0x66, 0x74, 0x48, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x12, 0x2e, 0x0a, 0x05,
	0x74, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x05, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x3d, 0x0a, 0x0f,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x22, 0xe6, 0x29, 0x0a, 0x10,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x50, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x50, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4d,
	0x65, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x72, 0x6f, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x61, 0x72, 0x6f, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x69, 0x63, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x69, 0x63, 0x50, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x32, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x54, 0x6f, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x54, 0x6f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c,
	0x74, 0x54, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x17, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74,
	0x54, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x54, 0x6f, 0x54, 0x75, 0x72,
	0x72, 0x65, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x54, 0x6f, 0x54, 0x75, 0x72, 0x72, 0x65, 0x74, 0x73,
	0x12, 0x30, 0x0a, 0x13, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x4d, 0x69,
	0x74, 0x69, 0x67, 0x61, 0x74, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x64,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x50,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x30, 0x0a, 0x13,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x57, 0x61, 0x72, 0x64, 0x73, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x57, 0x61, 0x72, 0x64, 0x73, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x4b, 0x69, 0x6c,
	0x6c, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x6e,
	0x65, 0x6d, 0x79, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x65, 0x6d,
	0x79, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f,
	0x6f, 0x64, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x4b, 0x69,
	0x6c, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42,
	0x6c, 0x6f, 0x6f, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x6f, 0x77,
	0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x3c, 0x0a, 0x19,
	0x67, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x45, 0x61, 0x72, 0x6c, 0x79,
	0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x19, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x45, 0x61, 0x72, 0x6c,
	0x79, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x67, 0x61,
	0x6d, 0x65, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x6e,
	0x64, 0x65, 0x64, 0x49, 0x6e, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x0c, 0x67, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x6f, 0x6c, 0x64, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x6f, 0x6c, 0x64, 0x45, 0x61, 0x72, 0x6e,
	0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x6f, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x6f, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2e,
	0x0a, 0x12, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74, 0x6f, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74, 0x6f,
	0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x6e, 0x68, 0x69, 0x62, 0x69,
	0x74, 0x6f, 0x72, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x69, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x61, 0x6b,
	0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x68, 0x69, 0x62, 0x69,
	0x74, 0x6f, 0x72, 0x73, 0x4c, 0x6f, 0x73, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x69, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x30, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x30, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x31, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x32, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x32,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x33, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x33, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x34, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x34, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x35, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x35, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x36, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x36, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x72, 0x65, 0x65,
	0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x53, 0x70, 0x72, 0x65, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x61, 0x6e, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x65,
	0x12, 0x34, 0x0a, 0x15, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x43, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x15, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73,
	0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x72, 0x65, 0x65, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x4b, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x53, 0x70, 0x72, 0x65, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x72, 0x67,
	0x65, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4b, 0x69, 0x6c, 0x6c, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x36, 0x0a, 0x16, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x37,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x10,
	0x6d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74,
	0x18, 0x38, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x12, 0x40, 0x0a, 0x1b, 0x6d, 0x61, 0x67, 0x69,
	0x63, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x54, 0x6f, 0x43, 0x68,
	0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x39, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x6d,
	0x61, 0x67, 0x69, 0x63, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x54,
	0x6f, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61,
	0x67, 0x69, 0x63, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x3b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x65, 0x65, 0x64, 0x56, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e,
	0x65, 0x65, 0x64, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x32,
	0x0a, 0x14, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73,
	0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6e, 0x65,
	0x75, 0x74, 0x72, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x18, 0x3e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x4b, 0x69, 0x6c,
	0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x4c, 0x6f, 0x73, 0x74, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x4c, 0x6f, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77,
	0x6e, 0x73, 0x18, 0x40, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x54,
	0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x53, 0x74, 0x6f, 0x6c, 0x65, 0x6e, 0x18, 0x41, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x53, 0x74,
	0x6f, 0x6c, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x17, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x73, 0x53, 0x74, 0x6f, 0x6c, 0x65, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18,
	0x42, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x73, 0x53, 0x74, 0x6f, 0x6c, 0x65, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x6f, 0x6e, 0x4d, 0x79, 0x57, 0x61, 0x79, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x43,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x6e, 0x4d, 0x79, 0x57, 0x61, 0x79, 0x50, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x44, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x6e, 0x74,
	0x61, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x45, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x65,
	0x6e, 0x74, 0x61, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x65, 0x72, 0x6b,
	0x73, 0x18, 0x46, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x2e, 0x50, 0x65, 0x72, 0x6b, 0x52, 0x05, 0x70, 0x65, 0x72, 0x6b, 0x73, 0x12, 0x30, 0x0a,
	0x13, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x65, 0x61, 0x6c, 0x74, 0x18, 0x47, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x70, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x12,
	0x46, 0x0a, 0x1e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x48, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x54, 0x6f, 0x43, 0x68,
	0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x49,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x41, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x31, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x31, 0x12,
	0x26, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x32, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41,
	0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x41, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x33, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x33, 0x12,
	0x26, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x34, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41,
	0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x34, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x41, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x35, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x35, 0x12,
	0x26, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x36, 0x18, 0x50, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41,
	0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x36, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x75, 0x62, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x51, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x63, 0x6f, 0x6e,
	0x18, 0x52, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68, 0x50, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x53, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x75, 0x73, 0x68, 0x50, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x75, 0x75, 0x69, 0x64, 0x18, 0x54, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x75, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x71, 0x75, 0x61, 0x64, 0x72,
	0x61, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x55, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x71, 0x75,
	0x61, 0x64, 0x72, 0x61, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x69, 0x6f,
	0x74, 0x49, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x56, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x72, 0x69, 0x6f, 0x74, 0x49, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x69, 0x6f, 0x74, 0x49, 0x64, 0x54, 0x61, 0x67, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x57, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x69, 0x6f, 0x74, 0x49, 0x64,
	0x54, 0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x58, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x57, 0x61, 0x72, 0x64, 0x73, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x49,
	0x6e, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x59, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x57, 0x61, 0x72, 0x64, 0x73, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x47,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x31, 0x43, 0x61, 0x73,
	0x74, 0x73, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x31,
	0x43, 0x61, 0x73, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x32, 0x43,
	0x61, 0x73, 0x74, 0x73, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x6c,
	0x6c, 0x32, 0x43, 0x61, 0x73, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x6c, 0x6c,
	0x33, 0x43, 0x61, 0x73, 0x74, 0x73, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x70,
	0x65, 0x6c, 0x6c, 0x33, 0x43, 0x61, 0x73, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x70, 0x65,
	0x6c, 0x6c, 0x34, 0x43, 0x61, 0x73, 0x74, 0x73, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x73, 0x70, 0x65, 0x6c, 0x6c, 0x34, 0x43, 0x61, 0x73, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x73,
	0x75, 0x62, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x5e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x75, 0x62, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x6d, 0x6d, 0x6f,
	0x6e, 0x65, 0x72, 0x31, 0x43, 0x61, 0x73, 0x74, 0x73, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x31, 0x43, 0x61, 0x73, 0x74, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x31, 0x49, 0x64, 0x18, 0x60,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x31, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x32, 0x43, 0x61,
	0x73, 0x74, 0x73, 0x18, 0x61, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x75, 0x6d, 0x6d, 0x6f,
	0x6e, 0x65, 0x72, 0x32, 0x43, 0x61, 0x73, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x6d,
	0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x32, 0x49, 0x64, 0x18, 0x62, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x32, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x63, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73,
	0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x65, 0x61, 0x6d, 0x45, 0x61, 0x72,
	0x6c, 0x79, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x74, 0x65, 0x61, 0x6d, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x53, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x18, 0x67, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x43, 0x69,
	0x6e, 0x67, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x18, 0x69, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x74, 0x69, 0x6d, 0x65, 0x43, 0x43, 0x69, 0x6e, 0x67, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x6a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12,
	0x42, 0x0a, 0x1c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x79, 0x4a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18,
	0x6b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x79,
	0x4a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x12,
	0x40, 0x0a, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x61, 0x6c, 0x74, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x6d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x46, 0x0a, 0x1e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x4f, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x4f, 0x6e,
	0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x6f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x44, 0x0a, 0x1d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e,
	0x65, 0x6d, 0x79, 0x4a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73,
	0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x70, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x4a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x69,
	0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x18, 0x71, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x15, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x73, 0x4f, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x72, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48,
	0x65, 0x61, 0x6c, 0x73, 0x4f, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x2e, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x4b,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x73, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12,
	0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x43, 0x44, 0x65,
	0x61, 0x6c, 0x74, 0x18, 0x74, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x43, 0x43, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x61,
	0x64, 0x18, 0x75, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x61, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x18,
	0x76, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x48, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x70, 0x6c,
	0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x77, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x72,
	0x69, 0x70, 0x6c, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x75,
	0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x18, 0x78, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x74, 0x72, 0x75, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x61, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x74, 0x72, 0x75, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x79, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x74, 0x72, 0x75, 0x65, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x75, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x72,
	0x75, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x75, 0x72, 0x72, 0x65, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x7b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x74, 0x75, 0x72, 0x72, 0x65, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x74, 0x75, 0x72, 0x72, 0x65, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77,
	0x6e, 0x73, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x75, 0x72, 0x72, 0x65, 0x74,
	0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x75, 0x72,
	0x72, 0x65, 0x74, 0x73, 0x4c, 0x6f, 0x73, 0x74, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x74, 0x75, 0x72, 0x72, 0x65, 0x74, 0x73, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75,
	0x6e, 0x72, 0x65, 0x61, 0x6c, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x2e, 0x0a,
	0x12, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x50, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x21, 0x0a,
	0x0b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x80, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x39, 0x0a, 0x17, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x72, 0x64, 0x73, 0x42,
	0x6f, 0x75, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x81, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x17, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x72, 0x64, 0x73, 0x42,
	0x6f, 0x75, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x64, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x21,
	0x0a, 0x0b, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x18, 0x83, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x64, 0x12, 0x11, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x77, 0x69, 0x6e, 0x22, 0x6d, 0x0a, 0x04, 0x50, 0x65, 0x72, 0x6b, 0x12, 0x30, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x50, 0x65,
	0x72, 0x6b, 0x73, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6b, 0x73, 0x12, 0x33,
	0x0a, 0x0a, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x50, 0x65, 0x72, 0x6b, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x65,
	0x72, 0x6b, 0x73, 0x22, 0x53, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6b, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x6c, 0x65, 0x78, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x66, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x6f, 0x66, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x50, 0x65, 0x72, 0x6b, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x65, 0x72,
	0x6b, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x22, 0x64, 0x0a, 0x12,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6b, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x65, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x61, 0x72, 0x31, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x61, 0x72, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x61,
	0x72, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x61, 0x72, 0x32, 0x12, 0x12,
	0x0a, 0x04, 0x76, 0x61, 0x72, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x61,
	0x72, 0x33, 0x22, 0xbd, 0x03, 0x0a, 0x07, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x30, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x30, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x31, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x32, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x33, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x34, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x34, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x35, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x35, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x36, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x36, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x37, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x37, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x38, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x38, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x39, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x39, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x31, 0x30, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x31, 0x30, 0x12, 0x24, 0x0a, 0x0d,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x31, 0x31, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x31, 0x31, 0x22, 0xe9, 0x30, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x2e, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x6c, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x61, 0x70, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x48, 0x65,
	0x61, 0x6c, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x61, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x12, 0x32, 0x0a, 0x14, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x69, 0x63,
	0x6b, 0x75, 0x70, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x53, 0x57, 0x41, 0x52, 0x4d, 0x5f, 0x44, 0x65,
	0x66, 0x65, 0x61, 0x74, 0x41, 0x61, 0x74, 0x72, 0x6f, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x53, 0x57, 0x41, 0x52, 0x4d, 0x44, 0x65, 0x66, 0x65, 0x61, 0x74, 0x41, 0x61, 0x74,
	0x72, 0x6f, 0x78, 0x12, 0x2b, 0x0a, 0x11, 0x53, 0x57, 0x41, 0x52, 0x4d, 0x5f, 0x44, 0x65, 0x66,
	0x65, 0x61, 0x74, 0x42, 0x72, 0x69, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x53, 0x57, 0x41, 0x52, 0x4d, 0x44, 0x65, 0x66, 0x65, 0x61, 0x74, 0x42, 0x72, 0x69, 0x61, 0x72,
	0x12, 0x35, 0x0a, 0x16, 0x53, 0x57, 0x41, 0x52, 0x4d, 0x5f, 0x44, 0x65, 0x66, 0x65, 0x61, 0x74,
	0x4d, 0x69, 0x6e, 0x69, 0x42, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x15, 0x53, 0x57, 0x41, 0x52, 0x4d, 0x44, 0x65, 0x66, 0x65, 0x61, 0x74, 0x4d, 0x69, 0x6e,
	0x69, 0x42, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x53, 0x57, 0x41, 0x52, 0x4d,
	0x5f, 0x45, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x53, 0x57, 0x41, 0x52, 0x4d, 0x45, 0x76, 0x6f, 0x6c, 0x76, 0x65,
	0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x53, 0x57, 0x41, 0x52, 0x4d, 0x5f,
	0x48, 0x61, 0x76, 0x65, 0x33, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x53, 0x57, 0x41, 0x52, 0x4d, 0x48, 0x61, 0x76, 0x65, 0x33, 0x50,
	0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x53, 0x57, 0x41, 0x52, 0x4d,
	0x5f, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x53, 0x57, 0x41, 0x52, 0x4d, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x65, 0x6d, 0x79,
	0x12, 0x29, 0x0a, 0x10, 0x53, 0x57, 0x41, 0x52, 0x4d, 0x5f, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70,
	0x47, 0x6f, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x53, 0x57, 0x41, 0x52,
	0x4d, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x53,
	0x57, 0x41, 0x52, 0x4d, 0x5f, 0x52, 0x65, 0x61, 0x63, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x35,
	0x30, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x53, 0x57, 0x41, 0x52, 0x4d, 0x52, 0x65,
	0x61, 0x63, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x35, 0x30, 0x12, 0x2d, 0x0a, 0x12, 0x53, 0x57,
	0x41, 0x52, 0x4d, 0x5f, 0x53, 0x75, 0x72, 0x76, 0x69, 0x76, 0x65, 0x31, 0x35, 0x4d, 0x69, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x53, 0x57, 0x41, 0x52, 0x4d, 0x53, 0x75, 0x72,
	0x76, 0x69, 0x76, 0x65, 0x31, 0x35, 0x4d, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x1c, 0x53, 0x57, 0x41,
	0x52, 0x4d, 0x5f, 0x57, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x35, 0x45, 0x76, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x1b, 0x53, 0x57, 0x41, 0x52, 0x4d, 0x57, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x35, 0x45, 0x76,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x55, 0x73, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x55, 0x73, 0x65, 0x73, 0x12, 0x30,
	0x0a, 0x13, 0x61, 0x63, 0x65, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x31, 0x35, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x61, 0x63, 0x65,
	0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x31, 0x35, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x3a, 0x0a, 0x18, 0x61, 0x6c, 0x6c, 0x69, 0x65, 0x64, 0x4a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x18, 0x61, 0x6c, 0x6c, 0x69, 0x65, 0x64, 0x4a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x62, 0x61, 0x72, 0x6f, 0x6e, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x61, 0x72, 0x6f, 0x6e, 0x54, 0x61, 0x6b, 0x65, 0x64,
	0x6f, 0x77, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x1e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x65, 0x4f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x62, 0x6c,
	0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x65, 0x4f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x4f,
	0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x62, 0x75, 0x66, 0x66, 0x73, 0x53, 0x74, 0x6f, 0x6c, 0x65, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x73, 0x53, 0x74, 0x6f, 0x6c, 0x65, 0x6e, 0x12, 0x3e,
	0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x1a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x57, 0x61, 0x72, 0x64, 0x73, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x57, 0x61, 0x72, 0x64, 0x73, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x50,
	0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x4f, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x64,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x4f, 0x6e, 0x54, 0x65, 0x61, 0x6d,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x52, 0x69, 0x66, 0x74, 0x48, 0x65, 0x72, 0x61,
	0x6c, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x64,
	0x57, 0x69, 0x74, 0x68, 0x52, 0x69, 0x66, 0x74, 0x48, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x12, 0x30,
	0x0a, 0x13, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x42, 0x79, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x43,
	0x68, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x64, 0x65, 0x61,
	0x74, 0x68, 0x73, 0x42, 0x79, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x73,
	0x12, 0x3e, 0x0a, 0x1a, 0x64, 0x6f, 0x64, 0x67, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x68,
	0x6f, 0x74, 0x73, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x64, 0x6f, 0x64, 0x67, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x53, 0x68, 0x6f, 0x74, 0x73, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x65, 0x73, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x65, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f,
	0x77, 0x6e, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x72, 0x61, 0x67, 0x6f,
	0x6e, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x53, 0x68,
	0x69, 0x65, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x53,
	0x68, 0x69, 0x65, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x4a, 0x0a, 0x20, 0x65, 0x6c, 0x64, 0x65,
	0x72, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x4f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x75, 0x6c, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x20, 0x65, 0x6c, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x4b,
	0x69, 0x6c, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x6e, 0x67,
	0x53, 0x6f, 0x75, 0x6c, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x6c, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61,
	0x67, 0x6f, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x15, 0x65, 0x6c, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x42, 0x0a, 0x1c, 0x65, 0x6e,
	0x65, 0x6d, 0x79, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1c, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x49,
	0x6d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38,
	0x0a, 0x17, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x4a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x17, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x4a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x4a, 0x0a, 0x20, 0x65, 0x70, 0x69, 0x63,
	0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x4e, 0x65, 0x61, 0x72,
	0x45, 0x6e, 0x65, 0x6d, 0x79, 0x4a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x72, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x20, 0x65, 0x70, 0x69, 0x63, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4b,
	0x69, 0x6c, 0x6c, 0x73, 0x4e, 0x65, 0x61, 0x72, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x4a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x26, 0x65, 0x70, 0x69, 0x63, 0x4d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x33, 0x30,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x4f, 0x66, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x26, 0x65, 0x70, 0x69, 0x63, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x33, 0x30, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x4f, 0x66, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x12, 0x2c, 0x0a, 0x11,
	0x65, 0x70, 0x69, 0x63, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6c,
	0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x65, 0x70, 0x69, 0x63, 0x4d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6c, 0x73, 0x12, 0x44, 0x0a, 0x1d, 0x65, 0x70,
	0x69, 0x63, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x6c, 0x65, 0x6e, 0x57,
	0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x53, 0x6d, 0x69, 0x74, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x1d, 0x65, 0x70, 0x69, 0x63, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x6f, 0x6c, 0x65, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x53, 0x6d, 0x69, 0x74, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x75, 0x72, 0x72, 0x65, 0x74, 0x4b,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x54, 0x75, 0x72, 0x72, 0x65, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x34,
	0x0a, 0x15, 0x66, 0x69, 0x73, 0x74, 0x42, 0x75, 0x6d, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x66,
	0x69, 0x73, 0x74, 0x42, 0x75, 0x6d, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6c, 0x61, 0x77, 0x6c, 0x65, 0x73, 0x73,
	0x41, 0x63, 0x65, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x6c, 0x61, 0x77,
	0x6c, 0x65, 0x73, 0x73, 0x41, 0x63, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x75, 0x6c, 0x6c,
	0x54, 0x65, 0x61, 0x6d, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x66, 0x75, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x61, 0x6b, 0x65,
	0x64, 0x6f, 0x77, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x5a, 0x0a, 0x28, 0x67, 0x65, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x64,
	0x6f, 0x77, 0x6e, 0x73, 0x49, 0x6e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x65, 0x73, 0x45, 0x61,
	0x72, 0x6c, 0x79, 0x4a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x73, 0x4c, 0x61, 0x6e, 0x65, 0x72,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x28, 0x67, 0x65, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x64,
	0x6f, 0x77, 0x6e, 0x73, 0x49, 0x6e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x65, 0x73, 0x45, 0x61,
	0x72, 0x6c, 0x79, 0x4a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x73, 0x4c, 0x61, 0x6e, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x0d, 0x67, 0x6f, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x67, 0x6f, 0x6c, 0x64, 0x50, 0x65, 0x72,
	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x61, 0x64, 0x4f, 0x70, 0x65,
	0x6e, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x68, 0x61,
	0x64, 0x4f, 0x70, 0x65, 0x6e, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x69, 0x6d,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x41, 0x6e, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x57,
	0x69, 0x74, 0x68, 0x41, 0x6c, 0x6c, 0x79, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x69,
	0x6d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x41, 0x6e, 0x64, 0x4b, 0x69, 0x6c, 0x6c,
	0x57, 0x69, 0x74, 0x68, 0x41, 0x6c, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x30, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43,
	0x72, 0x61, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x31, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x72, 0x61, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x38, 0x0a, 0x17, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x73, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x31, 0x30, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x17, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x31, 0x30, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x26, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x72, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x4e, 0x65,
	0x61, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x45, 0x70, 0x69, 0x63, 0x4d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x05, 0x52, 0x26, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x72, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x4e, 0x65, 0x61, 0x72,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x45, 0x70, 0x69, 0x63, 0x4d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x4c, 0x0a, 0x21, 0x6b, 0x54, 0x75, 0x72, 0x72, 0x65, 0x74, 0x73, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x50, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x46, 0x61, 0x6c, 0x6c, 0x18, 0x34, 0x20, 0x01, 0x28, 0x05, 0x52, 0x21, 0x6b,
	0x54, 0x75, 0x72, 0x72, 0x65, 0x74, 0x73, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x46, 0x61, 0x6c, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x64, 0x61, 0x18, 0x35, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x64, 0x61, 0x12, 0x38, 0x0a, 0x17, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x66, 0x74, 0x65, 0x72, 0x48,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x41, 0x6c, 0x6c, 0x79, 0x18, 0x36, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x17, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x66, 0x74, 0x65, 0x72, 0x48, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x41, 0x6c, 0x6c, 0x79, 0x12, 0x2c, 0x0a, 0x11,
	0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x37, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x25, 0x6b, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x54, 0x6f, 0x6f, 0x6b, 0x46, 0x75, 0x6c,
	0x6c, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x75, 0x72, 0x76, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x05, 0x52, 0x25, 0x6b, 0x69, 0x6c, 0x6c, 0x65,
	0x64, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x54, 0x6f, 0x6f, 0x6b, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x65,
	0x61, 0x6d, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x75, 0x72, 0x76, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x72, 0x65, 0x65,
	0x73, 0x18, 0x39, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x53, 0x70, 0x72, 0x65, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x4e,
	0x65, 0x61, 0x72, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x54, 0x75, 0x72, 0x72, 0x65, 0x74, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x4e, 0x65, 0x61, 0x72, 0x45,
	0x6e, 0x65, 0x6d, 0x79, 0x54, 0x75, 0x72, 0x72, 0x65, 0x74, 0x12, 0x50, 0x0a, 0x23, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x4f, 0x6e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x61, 0x6e, 0x65, 0x73, 0x45,
	0x61, 0x72, 0x6c, 0x79, 0x4a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x73, 0x4c, 0x61, 0x6e, 0x65,
	0x72, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x23, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x4f, 0x6e,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x61, 0x6e, 0x65, 0x73, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x4a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x73, 0x4c, 0x61, 0x6e, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x1f,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x4f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x48,
	0x65, 0x61, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x41, 0x72, 0x61, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x4f, 0x6e, 0x52, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x48, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x41, 0x72,
	0x61, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x13, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x55,
	0x6e, 0x64, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x54, 0x75, 0x72, 0x72, 0x65, 0x74, 0x18, 0x3d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x4f,
	0x77, 0x6e, 0x54, 0x75, 0x72, 0x72, 0x65, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x48, 0x65, 0x6c, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x70, 0x69,
	0x63, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x48, 0x65, 0x6c, 0x70, 0x46, 0x72, 0x6f,
	0x6d, 0x45, 0x70, 0x69, 0x63, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x19,
	0x6b, 0x6e, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x54, 0x65,
	0x61, 0x6d, 0x41, 0x6e, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x19, 0x6b, 0x6e, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x54,
	0x65, 0x61, 0x6d, 0x41, 0x6e, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x17, 0x6c, 0x61,
	0x6e, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x68, 0x6f, 0x74, 0x73, 0x45, 0x61, 0x72, 0x6c,
	0x79, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6c, 0x61, 0x6e,
	0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x68, 0x6f, 0x74, 0x73, 0x45, 0x61, 0x72, 0x6c, 0x79,
	0x47, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x6c, 0x61, 0x6e, 0x65, 0x4d, 0x69, 0x6e, 0x69,
	0x6f, 0x6e, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x31, 0x30, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x41, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6c, 0x61, 0x6e, 0x65, 0x4d, 0x69, 0x6e,
	0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x31, 0x30, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x42, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x65, 0x67, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x65,
	0x67, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x64, 0x18,
	0x43, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x49, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x6f, 0x73, 0x74,
	0x41, 0x6e, 0x49, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x44, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x6c, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x49, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74,
	0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x4b, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x66,
	0x69, 0x63, 0x69, 0x74, 0x18, 0x45, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x4b,
	0x69, 0x6c, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x63, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x6d, 0x65,
	0x6a, 0x61, 0x69, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6d, 0x65, 0x6a, 0x61, 0x69,
	0x73, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x40, 0x0a, 0x1b, 0x6d, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x4a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x54, 0x68, 0x61, 0x6e, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18,
	0x47, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x6d, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x65, 0x6d, 0x79,
	0x4a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x68, 0x61, 0x6e, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4b, 0x69, 0x6c, 0x6c, 0x4f,
	0x6e, 0x65, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x18, 0x48, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x4b, 0x69, 0x6c, 0x6c, 0x4f, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x6c, 0x6c,
	0x12, 0x3e, 0x0a, 0x1a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x75, 0x72, 0x72, 0x65, 0x74, 0x52,
	0x69, 0x66, 0x74, 0x48, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x49,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x75, 0x72, 0x72, 0x65,
	0x74, 0x52, 0x69, 0x66, 0x74, 0x48, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x4a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x12, 0x46, 0x0a, 0x1e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x41, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x61,
	0x73, 0x68, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x41, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x12, 0x4e, 0x0a, 0x22, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x54, 0x75, 0x72, 0x72, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x73, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x31, 0x30, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x4c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x22, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x54, 0x75, 0x72, 0x72, 0x65,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x31,
	0x30, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x4d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x4b,
	0x69, 0x6c, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x6f, 0x75, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x65, 0x64, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x18, 0x4e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x14, 0x6f, 0x75, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x4e,
	0x65, 0x78, 0x75, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x17, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x63, 0x74, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x6c, 0x73, 0x54, 0x61,
	0x6b, 0x65, 0x6e, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x63, 0x74, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x6c, 0x73, 0x54, 0x61, 0x6b,
	0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x65, 0x63, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x65, 0x63, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x69, 0x63, 0x6b, 0x4b, 0x69, 0x6c, 0x6c,
	0x57, 0x69, 0x74, 0x68, 0x41, 0x6c, 0x6c, 0x79, 0x18, 0x51, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x70, 0x69, 0x63, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x41, 0x6c, 0x6c, 0x79,
	0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f, 0x72, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x52, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x6f, 0x72, 0x6f, 0x45, 0x78,
	0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x71, 0x75, 0x69, 0x63,
	0x6b, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x73, 0x65, 0x18, 0x53, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x71, 0x75, 0x69, 0x63, 0x6b, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x71, 0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x72, 0x73, 0x74, 0x54, 0x75, 0x72, 0x72, 0x65, 0x74,
	0x18, 0x54, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x54, 0x75, 0x72, 0x72, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x71, 0x75, 0x69, 0x63,
	0x6b, 0x53, 0x6f, 0x6c, 0x6f, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x55, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x53, 0x6f, 0x6c, 0x6f, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x12, 0x30, 0x0a, 0x13, 0x72, 0x69, 0x66, 0x74, 0x48, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x54, 0x61,
	0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x56, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x72,
	0x69, 0x66, 0x74, 0x48, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77,
	0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x61, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x79, 0x46, 0x72,
	0x6f, 0x6d, 0x44, 0x65, 0x61, 0x74, 0x68, 0x18, 0x57, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73,
	0x61, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x61, 0x74, 0x68,
	0x12, 0x2a, 0x0a, 0x10, 0x73, 0x63, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x72, 0x61, 0x62, 0x4b,
	0x69, 0x6c, 0x6c, 0x73, 0x18, 0x58, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x63, 0x75, 0x74,
	0x74, 0x6c, 0x65, 0x43, 0x72, 0x61, 0x62, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x4e, 0x0a, 0x22,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x41, 0x63,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x72, 0x73, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0x59, 0x20, 0x01, 0x28, 0x05, 0x52, 0x22, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x41, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x2a, 0x0a, 0x10,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x44, 0x6f, 0x64, 0x67, 0x65, 0x64,
	0x18, 0x5a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x44, 0x6f, 0x64, 0x67, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x48, 0x69, 0x74, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x48, 0x69, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x69, 0x74, 0x18, 0x5c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x48,
	0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x6f, 0x6c, 0x6f, 0x42, 0x61, 0x72, 0x6f, 0x6e, 0x4b,
	0x69, 0x6c, 0x6c, 0x73, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x6f, 0x6c, 0x6f,
	0x42, 0x61, 0x72, 0x6f, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f,
	0x6c, 0x6f, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73,
	0x6f, 0x6c, 0x6f, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x74, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x57, 0x61, 0x72, 0x64, 0x73, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x18, 0x5f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x57, 0x61, 0x72,
	0x64, 0x73, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x75, 0x72, 0x76,
	0x69, 0x76, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x69, 0x67, 0x69, 0x74, 0x48,
	0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x60, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x73, 0x75,
	0x72, 0x76, 0x69, 0x76, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x69, 0x67, 0x69,
	0x74, 0x48, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x1f, 0x73, 0x75, 0x72, 0x76,
	0x69, 0x76, 0x65, 0x64, 0x54, 0x68, 0x72, 0x65, 0x65, 0x49, 0x6d, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x69, 0x7a, 0x65, 0x73, 0x49, 0x6e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x18, 0x61, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x1f, 0x73, 0x75, 0x72, 0x76, 0x69, 0x76, 0x65, 0x64, 0x54, 0x68, 0x72, 0x65, 0x65,
	0x49, 0x6d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x73, 0x49, 0x6e, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x4f, 0x6e,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x54, 0x75, 0x72, 0x72, 0x65, 0x74, 0x18, 0x62, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x15, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x4f, 0x6e, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x54, 0x75, 0x72, 0x72, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x6b, 0x65,
	0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x63, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x61, 0x6b,
	0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x12, 0x50, 0x0a, 0x23, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f,
	0x77, 0x6e, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x47, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x23, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x47, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41,
	0x64, 0x76, 0x61, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x20, 0x74, 0x61, 0x6b, 0x65,
	0x64, 0x6f, 0x77, 0x6e, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x20, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x4a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x53,
	0x70, 0x61, 0x77, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e,
	0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x58, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x58, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x49, 0x6e, 0x41, 0x6c, 0x63, 0x6f, 0x76,
	0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77,
	0x6e, 0x73, 0x49, 0x6e, 0x41, 0x6c, 0x63, 0x6f, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x74, 0x61,
	0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x49, 0x6e, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x46, 0x6f,
	0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x18, 0x68, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x74, 0x61,
	0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x49, 0x6e, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x46, 0x6f,
	0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x42, 0x61,
	0x72, 0x6f, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x69, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x74, 0x65, 0x61, 0x6d, 0x42, 0x61, 0x72, 0x6f, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x32,
	0x0a, 0x14, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x74, 0x65,
	0x61, 0x6d, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x65, 0x61, 0x6d, 0x45, 0x6c, 0x64, 0x65, 0x72, 0x44,
	0x72, 0x61, 0x67, 0x6f, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x74, 0x65, 0x61, 0x6d, 0x45, 0x6c, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x67, 0x6f,
	0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x65, 0x61, 0x6d, 0x52, 0x69,
	0x66, 0x74, 0x48, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x6c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x74, 0x65, 0x61, 0x6d, 0x52, 0x69, 0x66, 0x74, 0x48, 0x65, 0x72,
	0x61, 0x6c, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x74, 0x6f, 0x6f, 0x6b,
	0x4c, 0x61, 0x72, 0x67, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x75, 0x72, 0x76, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x74, 0x6f, 0x6f, 0x6b, 0x4c,
	0x61, 0x72, 0x67, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x75, 0x72, 0x76, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x75, 0x72, 0x72, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74,
	0x75, 0x72, 0x72, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x6e,
	0x12, 0x28, 0x0a, 0x0f, 0x74, 0x75, 0x72, 0x72, 0x65, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f,
	0x77, 0x6e, 0x73, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x75, 0x72, 0x72, 0x65,
	0x74, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x74, 0x75,
	0x72, 0x72, 0x65, 0x74, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x52, 0x69,
	0x66, 0x74, 0x48, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x18, 0x70, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a,
	0x74, 0x75, 0x72, 0x72, 0x65, 0x74, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x57, 0x69, 0x74, 0x68,
	0x52, 0x69, 0x66, 0x74, 0x48, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x12, 0x42, 0x0a, 0x1c, 0x74, 0x77,
	0x65, 0x6e, 0x74, 0x79, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x33, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x71, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1c, 0x74, 0x77, 0x65, 0x6e, 0x74, 0x79, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x49,
	0x6e, 0x33, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38,
	0x0a, 0x17, 0x74, 0x77, 0x6f, 0x57, 0x61, 0x72, 0x64, 0x73, 0x4f, 0x6e, 0x65, 0x53, 0x77, 0x65,
	0x65, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x72, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x17, 0x74, 0x77, 0x6f, 0x57, 0x61, 0x72, 0x64, 0x73, 0x4f, 0x6e, 0x65, 0x53, 0x77, 0x65, 0x65,
	0x70, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x6e, 0x73, 0x65,
	0x65, 0x6e, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x73, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x75, 0x6e, 0x73, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x32,
	0x0a, 0x14, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x72,
	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x74, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x6f, 0x69, 0x64, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x18, 0x75, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x76, 0x6f, 0x69,
	0x64, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x24, 0x0a, 0x0d,
	0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x76, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77,
	0x6e, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f,
	0x77, 0x6e, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x32, 0x30, 0x4d, 0x18, 0x77, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x16, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e,
	0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x32, 0x30, 0x4d, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x47, 0x75, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x78, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x77, 0x61, 0x72, 0x64, 0x73, 0x47, 0x75, 0x61, 0x72, 0x64, 0x65, 0x64, 0x22, 0x5e,
	0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x6b,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x5c, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x21, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x22, 0x6a, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x22, 0xd0, 0x01, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x6e, 0x64,
	0x4f, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x06, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x73, 0x22, 0x49, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x75, 0x75, 0x69, 0x64, 0x22, 0x83,
	0x02, 0x0a, 0x05, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x53,
	0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x1a, 0x5f, 0x0a, 0x16, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xf0, 0x06, 0x0a, 0x18, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x48, 0x61, 0x73, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x72, 0x6d,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x50, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x50, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x61,
	0x72, 0x6d, 0x6f, 0x72, 0x50, 0x65, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x50, 0x65, 0x6e, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x50, 0x65, 0x6e, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x62, 0x6f, 0x6e, 0x75, 0x73,
	0x41, 0x72, 0x6d, 0x6f, 0x72, 0x50, 0x65, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12,
	0x32, 0x0a, 0x14, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x50, 0x65, 0x6e,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x50, 0x65, 0x6e, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x63, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x63, 0x52, 0x65, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77,
	0x6e, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d, 0x61, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d, 0x61, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x67,
	0x69, 0x63, 0x50, 0x65, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x67,
	0x69, 0x63, 0x50, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x50, 0x65,
	0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x6d, 0x61, 0x67, 0x69, 0x63, 0x50, 0x65, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x69, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x6d, 0x6e, 0x69, 0x76,
	0x61, 0x6d, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x6d, 0x6e, 0x69, 0x76,
	0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x56,
	0x61, 0x6d, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x56, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x65,
	0x6c, 0x6c, 0x56, 0x61, 0x6d, 0x70, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x70,
	0x65, 0x6c, 0x6c, 0x56, 0x61, 0x6d, 0x70, 0x22, 0xf1, 0x04, 0x0a, 0x0b, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x67, 0x69, 0x63,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x6e,
	0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x44, 0x6f, 0x6e, 0x65, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x54, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x61, 0x67,
	0x69, 0x63, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x2e, 0x0a,
	0x12, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x44, 0x0a,
	0x1d, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x6f, 0x6e, 0x65, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x13, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x12,
	0x3e, 0x0a, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x6f,
	0x6e, 0x65, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x44, 0x6f, 0x6e, 0x65, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61,
	0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x74,
	0x72, 0x75, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x72, 0x75, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x6f, 0x6e, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x74, 0x72, 0x75, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x44, 0x6f, 0x6e, 0x65, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x74, 0x72, 0x75, 0x65, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x75, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54,
	0x61, 0x6b, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x72, 0x75, 0x65,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x22, 0x88, 0x04, 0x0a, 0x10,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x12, 0x47, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x43, 0x68, 0x61,
	0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6d,
	0x70, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x36, 0x0a, 0x0b, 0x64,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x6f, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x67, 0x6f, 0x6c, 0x64,
	0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x69,
	0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e,
	0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x18,
	0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18,
	0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x70, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x78, 0x70, 0x22, 0xaa, 0x09, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x55, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x12, 0x2a,
	0x0a, 0x10, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6b, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x69,
	0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6b, 0x69,
	0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x12, 0x43, 0x0a,
	0x11, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61,
	0x6c, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x2e, 0x56, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x11, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61,
	0x6c, 0x74, 0x12, 0x49, 0x0a, 0x14, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x63, 0x74, 0x69,
	0x6d, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x14, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x69, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x69, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x05, 0x52, 0x17, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x61, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x49, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x6f, 0x6c, 0x64, 0x47, 0x61, 0x69,
	0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x6f, 0x6c, 0x64, 0x47, 0x61, 0x69,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x54,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x77, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x77, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4b, 0x69,
	0x6c, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x28, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x61, 0x6d,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54,
	0x65, 0x61, 0x6d, 0x22, 0x26, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a,
	0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x22, 0x98, 0x02, 0x0a, 0x0c,
	0x56, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x65, 0x6c, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x53, 0x6c, 0x6f,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x53, 0x6c,
	0x6f, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x75, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x72, 0x75, 0x65, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32, 0xaa, 0x02, 0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x20, 0x2e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x42, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x21, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x79, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42,
	0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x73, 0x42, 0x79, 0x50, 0x75, 0x75, 0x69, 0x64, 0x12, 0x22, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x73, 0x42, 0x79,
	0x50, 0x75, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x73, 0x42, 0x79, 0x50, 0x75, 0x75, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x36, 0x5a, 0x34, 0x6d, 0x61, 0x78, 0x69, 0x73, 0x63, 0x68, 0x6d, 0x61,
	0x78, 0x69, 0x2f, 0x6a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x76,
	0x31, 0x3b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_matches_v1_matches_proto_rawDescOnce sync.Once
	file_matches_v1_matches_proto_rawDescData = file_matches_v1_matches_proto_rawDesc
)

func file_matches_v1_matches_proto_rawDescGZIP() []byte {
	file_matches_v1_matches_proto_rawDescOnce.Do(func() {
		file_matches_v1_matches_proto_rawDescData = protoimpl.X.CompressGZIP(file_matches_v1_matches_proto_rawDescData)
	})
	return file_matches_v1_matches_proto_rawDescData
}

var file_matches_v1_matches_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_matches_v1_matches_proto_goTypes = []any{
	(*GetMatchIdsByPuuidRequest)(nil),  // 0: matches.GetMatchIdsByPuuidRequest
	(*GetMatchIdsByPuuidResponse)(nil), // 1: matches.GetMatchIdsByPuuidResponse
	(*GetMatchByMatchIdRequest)(nil),   // 2: matches.GetMatchByMatchIdRequest
	(*GetMatchByMatchIdResponse)(nil),  // 3: matches.GetMatchByMatchIdResponse
	(*MatchMetadata)(nil),              // 4: matches.MatchMetadata
	(*MatchInfo)(nil),                  // 5: matches.MatchInfo
	(*Team)(nil),                       // 6: matches.Team
	(*Ban)(nil),                        // 7: matches.Ban
	(*Objective)(nil),                  // 8: matches.Objective
	(*ObjectiveTarget)(nil),            // 9: matches.ObjectiveTarget
	(*MatchParticipant)(nil),           // 10: matches.MatchParticipant
	(*Perk)(nil),                       // 11: matches.Perk
	(*StatPerks)(nil),                  // 12: matches.StatPerks
	(*StylePerks)(nil),                 // 13: matches.StylePerks
	(*StylePerkSelection)(nil),         // 14: matches.StylePerkSelection
	(*Mission)(nil),                    // 15: matches.Mission
	(*Challange)(nil),                  // 16: matches.Challange
	(*Match)(nil),                      // 17: matches.Match
	(*GetMatchTimelineRequest)(nil),    // 18: matches.GetMatchTimelineRequest
	(*GetMatchTimelineResponse)(nil),   // 19: matches.GetMatchTimelineResponse
	(*Timeline)(nil),                   // 20: matches.Timeline
	(*Metadata)(nil),                   // 21: matches.Metadata
	(*Info)(nil),                       // 22: matches.Info
	(*Participant)(nil),                // 23: matches.Participant
	(*Frame)(nil),                      // 24: matches.Frame
	(*ParticipantChampionStats)(nil),   // 25: matches.ParticipantChampionStats
	(*DamageStats)(nil),                // 26: matches.DamageStats
	(*ParticipantFrame)(nil),           // 27: matches.ParticipantFrame
	(*Event)(nil),                      // 28: matches.Event
	(*Position)(nil),                   // 29: matches.Position
	(*VictimDamage)(nil),               // 30: matches.VictimDamage
	nil,                                // 31: matches.Frame.ParticipantFramesEntry
	(v1.RegionalRoutingValues)(0),      // 32: account.RegionalRoutingValues
}
var file_matches_v1_matches_proto_depIdxs = []int32{
	32, // 0: matches.GetMatchIdsByPuuidRequest.region:type_name -> account.RegionalRoutingValues
	32, // 1: matches.GetMatchByMatchIdRequest.region:type_name -> account.RegionalRoutingValues
	17, // 2: matches.GetMatchByMatchIdResponse.match:type_name -> matches.Match
	10, // 3: matches.MatchInfo.participants:type_name -> matches.MatchParticipant
	6,  // 4: matches.MatchInfo.teams:type_name -> matches.Team
	7,  // 5: matches.Team.bans:type_name -> matches.Ban
	8,  // 6: matches.Team.objectives:type_name -> matches.Objective
	9,  // 7: matches.Objective.baron:type_name -> matches.ObjectiveTarget
	9,  // 8: matches.Objective.champion:type_name -> matches.ObjectiveTarget
	9,  // 9: matches.Objective.dragon:type_name -> matches.ObjectiveTarget
	9,  // 10: matches.Objective.horde:type_name -> matches.ObjectiveTarget
	9,  // 11: matches.Objective.inhibitor:type_name -> matches.ObjectiveTarget
	9,  // 12: matches.Objective.riftHerald:type_name -> matches.ObjectiveTarget
	9,  // 13: matches.Objective.tower:type_name -> matches.ObjectiveTarget
	16, // 14: matches.MatchParticipant.challanges:type_name -> matches.Challange
	15, // 15: matches.MatchParticipant.missions:type_name -> matches.Mission
	11, // 16: matches.MatchParticipant.perks:type_name -> matches.Perk
	12, // 17: matches.Perk.statPerks:type_name -> matches.StatPerks
	13, // 18: matches.Perk.stylePerks:type_name -> matches.StylePerks
	14, // 19: matches.StylePerks.selections:type_name -> matches.StylePerkSelection
	21, // 20: matches.Match.metadata:type_name -> matches.Metadata
	5,  // 21: matches.Match.info:type_name -> matches.MatchInfo
	32, // 22: matches.GetMatchTimelineRequest.region:type_name -> account.RegionalRoutingValues
	20, // 23: matches.GetMatchTimelineResponse.timeline:type_name -> matches.Timeline
	21, // 24: matches.Timeline.metadata:type_name -> matches.Metadata
	22, // 25: matches.Timeline.info:type_name -> matches.Info
	24, // 26: matches.Info.frames:type_name -> matches.Frame
	23, // 27: matches.Info.participants:type_name -> matches.Participant
	28, // 28: matches.Frame.events:type_name -> matches.Event
	31, // 29: matches.Frame.participantFrames:type_name -> matches.Frame.ParticipantFramesEntry
	25, // 30: matches.ParticipantFrame.championStats:type_name -> matches.ParticipantChampionStats
	26, // 31: matches.ParticipantFrame.damageStats:type_name -> matches.DamageStats
	29, // 32: matches.ParticipantFrame.position:type_name -> matches.Position
	29, // 33: matches.Event.position:type_name -> matches.Position
	30, // 34: matches.Event.victimDamageDealt:type_name -> matches.VictimDamage
	30, // 35: matches.Event.victimDamageReceived:type_name -> matches.VictimDamage
	27, // 36: matches.Frame.ParticipantFramesEntry.value:type_name -> matches.ParticipantFrame
	18, // 37: matches.MatchesService.GetMatchTimeline:input_type -> matches.GetMatchTimelineRequest
	2,  // 38: matches.MatchesService.GetMatchByMatchId:input_type -> matches.GetMatchByMatchIdRequest
	0,  // 39: matches.MatchesService.GetMatchIdsByPuuid:input_type -> matches.GetMatchIdsByPuuidRequest
	19, // 40: matches.MatchesService.GetMatchTimeline:output_type -> matches.GetMatchTimelineResponse
	3,  // 41: matches.MatchesService.GetMatchByMatchId:output_type -> matches.GetMatchByMatchIdResponse
	1,  // 42: matches.MatchesService.GetMatchIdsByPuuid:output_type -> matches.GetMatchIdsByPuuidResponse
	40, // [40:43] is the sub-list for method output_type
	37, // [37:40] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_matches_v1_matches_proto_init() }
func file_matches_v1_matches_proto_init() {
	if File_matches_v1_matches_proto != nil {
		return
	}
	file_matches_v1_matches_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_matches_v1_matches_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_matches_v1_matches_proto_goTypes,
		DependencyIndexes: file_matches_v1_matches_proto_depIdxs,
		MessageInfos:      file_matches_v1_matches_proto_msgTypes,
	}.Build()
	File_matches_v1_matches_proto = out.File
	file_matches_v1_matches_proto_rawDesc = nil
	file_matches_v1_matches_proto_goTypes = nil
	file_matches_v1_matches_proto_depIdxs = nil
}
