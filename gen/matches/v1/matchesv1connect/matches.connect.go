// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: matches/v1/matches.proto

package matchesv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "maxischmaxi/jstreams-server/gen/matches/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MatchesServiceName is the fully-qualified name of the MatchesService service.
	MatchesServiceName = "matches.MatchesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MatchesServiceGetMatchTimelineProcedure is the fully-qualified name of the MatchesService's
	// GetMatchTimeline RPC.
	MatchesServiceGetMatchTimelineProcedure = "/matches.MatchesService/GetMatchTimeline"
	// MatchesServiceGetMatchByMatchIdProcedure is the fully-qualified name of the MatchesService's
	// GetMatchByMatchId RPC.
	MatchesServiceGetMatchByMatchIdProcedure = "/matches.MatchesService/GetMatchByMatchId"
	// MatchesServiceGetMatchIdsByPuuidProcedure is the fully-qualified name of the MatchesService's
	// GetMatchIdsByPuuid RPC.
	MatchesServiceGetMatchIdsByPuuidProcedure = "/matches.MatchesService/GetMatchIdsByPuuid"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	matchesServiceServiceDescriptor                  = v1.File_matches_v1_matches_proto.Services().ByName("MatchesService")
	matchesServiceGetMatchTimelineMethodDescriptor   = matchesServiceServiceDescriptor.Methods().ByName("GetMatchTimeline")
	matchesServiceGetMatchByMatchIdMethodDescriptor  = matchesServiceServiceDescriptor.Methods().ByName("GetMatchByMatchId")
	matchesServiceGetMatchIdsByPuuidMethodDescriptor = matchesServiceServiceDescriptor.Methods().ByName("GetMatchIdsByPuuid")
)

// MatchesServiceClient is a client for the matches.MatchesService service.
type MatchesServiceClient interface {
	GetMatchTimeline(context.Context, *connect.Request[v1.GetMatchTimelineRequest]) (*connect.Response[v1.GetMatchTimelineResponse], error)
	GetMatchByMatchId(context.Context, *connect.Request[v1.GetMatchByMatchIdRequest]) (*connect.Response[v1.GetMatchByMatchIdResponse], error)
	GetMatchIdsByPuuid(context.Context, *connect.Request[v1.GetMatchIdsByPuuidRequest]) (*connect.Response[v1.GetMatchIdsByPuuidResponse], error)
}

// NewMatchesServiceClient constructs a client for the matches.MatchesService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMatchesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MatchesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &matchesServiceClient{
		getMatchTimeline: connect.NewClient[v1.GetMatchTimelineRequest, v1.GetMatchTimelineResponse](
			httpClient,
			baseURL+MatchesServiceGetMatchTimelineProcedure,
			connect.WithSchema(matchesServiceGetMatchTimelineMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getMatchByMatchId: connect.NewClient[v1.GetMatchByMatchIdRequest, v1.GetMatchByMatchIdResponse](
			httpClient,
			baseURL+MatchesServiceGetMatchByMatchIdProcedure,
			connect.WithSchema(matchesServiceGetMatchByMatchIdMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getMatchIdsByPuuid: connect.NewClient[v1.GetMatchIdsByPuuidRequest, v1.GetMatchIdsByPuuidResponse](
			httpClient,
			baseURL+MatchesServiceGetMatchIdsByPuuidProcedure,
			connect.WithSchema(matchesServiceGetMatchIdsByPuuidMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// matchesServiceClient implements MatchesServiceClient.
type matchesServiceClient struct {
	getMatchTimeline   *connect.Client[v1.GetMatchTimelineRequest, v1.GetMatchTimelineResponse]
	getMatchByMatchId  *connect.Client[v1.GetMatchByMatchIdRequest, v1.GetMatchByMatchIdResponse]
	getMatchIdsByPuuid *connect.Client[v1.GetMatchIdsByPuuidRequest, v1.GetMatchIdsByPuuidResponse]
}

// GetMatchTimeline calls matches.MatchesService.GetMatchTimeline.
func (c *matchesServiceClient) GetMatchTimeline(ctx context.Context, req *connect.Request[v1.GetMatchTimelineRequest]) (*connect.Response[v1.GetMatchTimelineResponse], error) {
	return c.getMatchTimeline.CallUnary(ctx, req)
}

// GetMatchByMatchId calls matches.MatchesService.GetMatchByMatchId.
func (c *matchesServiceClient) GetMatchByMatchId(ctx context.Context, req *connect.Request[v1.GetMatchByMatchIdRequest]) (*connect.Response[v1.GetMatchByMatchIdResponse], error) {
	return c.getMatchByMatchId.CallUnary(ctx, req)
}

// GetMatchIdsByPuuid calls matches.MatchesService.GetMatchIdsByPuuid.
func (c *matchesServiceClient) GetMatchIdsByPuuid(ctx context.Context, req *connect.Request[v1.GetMatchIdsByPuuidRequest]) (*connect.Response[v1.GetMatchIdsByPuuidResponse], error) {
	return c.getMatchIdsByPuuid.CallUnary(ctx, req)
}

// MatchesServiceHandler is an implementation of the matches.MatchesService service.
type MatchesServiceHandler interface {
	GetMatchTimeline(context.Context, *connect.Request[v1.GetMatchTimelineRequest]) (*connect.Response[v1.GetMatchTimelineResponse], error)
	GetMatchByMatchId(context.Context, *connect.Request[v1.GetMatchByMatchIdRequest]) (*connect.Response[v1.GetMatchByMatchIdResponse], error)
	GetMatchIdsByPuuid(context.Context, *connect.Request[v1.GetMatchIdsByPuuidRequest]) (*connect.Response[v1.GetMatchIdsByPuuidResponse], error)
}

// NewMatchesServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMatchesServiceHandler(svc MatchesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	matchesServiceGetMatchTimelineHandler := connect.NewUnaryHandler(
		MatchesServiceGetMatchTimelineProcedure,
		svc.GetMatchTimeline,
		connect.WithSchema(matchesServiceGetMatchTimelineMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	matchesServiceGetMatchByMatchIdHandler := connect.NewUnaryHandler(
		MatchesServiceGetMatchByMatchIdProcedure,
		svc.GetMatchByMatchId,
		connect.WithSchema(matchesServiceGetMatchByMatchIdMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	matchesServiceGetMatchIdsByPuuidHandler := connect.NewUnaryHandler(
		MatchesServiceGetMatchIdsByPuuidProcedure,
		svc.GetMatchIdsByPuuid,
		connect.WithSchema(matchesServiceGetMatchIdsByPuuidMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/matches.MatchesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MatchesServiceGetMatchTimelineProcedure:
			matchesServiceGetMatchTimelineHandler.ServeHTTP(w, r)
		case MatchesServiceGetMatchByMatchIdProcedure:
			matchesServiceGetMatchByMatchIdHandler.ServeHTTP(w, r)
		case MatchesServiceGetMatchIdsByPuuidProcedure:
			matchesServiceGetMatchIdsByPuuidHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMatchesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMatchesServiceHandler struct{}

func (UnimplementedMatchesServiceHandler) GetMatchTimeline(context.Context, *connect.Request[v1.GetMatchTimelineRequest]) (*connect.Response[v1.GetMatchTimelineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("matches.MatchesService.GetMatchTimeline is not implemented"))
}

func (UnimplementedMatchesServiceHandler) GetMatchByMatchId(context.Context, *connect.Request[v1.GetMatchByMatchIdRequest]) (*connect.Response[v1.GetMatchByMatchIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("matches.MatchesService.GetMatchByMatchId is not implemented"))
}

func (UnimplementedMatchesServiceHandler) GetMatchIdsByPuuid(context.Context, *connect.Request[v1.GetMatchIdsByPuuidRequest]) (*connect.Response[v1.GetMatchIdsByPuuidResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("matches.MatchesService.GetMatchIdsByPuuid is not implemented"))
}
