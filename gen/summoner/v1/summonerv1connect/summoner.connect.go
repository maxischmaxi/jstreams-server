// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: summoner/v1/summoner.proto

package summonerv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "maxischmaxi/jstreams-server/gen/summoner/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SummonerServiceName is the fully-qualified name of the SummonerService service.
	SummonerServiceName = "summoner.SummonerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SummonerServiceGetSummonerByPuuidProcedure is the fully-qualified name of the SummonerService's
	// GetSummonerByPuuid RPC.
	SummonerServiceGetSummonerByPuuidProcedure = "/summoner.SummonerService/GetSummonerByPuuid"
	// SummonerServiceGetSummonerSpellsProcedure is the fully-qualified name of the SummonerService's
	// GetSummonerSpells RPC.
	SummonerServiceGetSummonerSpellsProcedure = "/summoner.SummonerService/GetSummonerSpells"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	summonerServiceServiceDescriptor                  = v1.File_summoner_v1_summoner_proto.Services().ByName("SummonerService")
	summonerServiceGetSummonerByPuuidMethodDescriptor = summonerServiceServiceDescriptor.Methods().ByName("GetSummonerByPuuid")
	summonerServiceGetSummonerSpellsMethodDescriptor  = summonerServiceServiceDescriptor.Methods().ByName("GetSummonerSpells")
)

// SummonerServiceClient is a client for the summoner.SummonerService service.
type SummonerServiceClient interface {
	GetSummonerByPuuid(context.Context, *connect.Request[v1.GetSummonerByPuuidRequest]) (*connect.Response[v1.GetSummonerByPuuidResponse], error)
	GetSummonerSpells(context.Context, *connect.Request[v1.GetSummonerSpellsRequest]) (*connect.Response[v1.GetSummonerSpellsResponse], error)
}

// NewSummonerServiceClient constructs a client for the summoner.SummonerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSummonerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SummonerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &summonerServiceClient{
		getSummonerByPuuid: connect.NewClient[v1.GetSummonerByPuuidRequest, v1.GetSummonerByPuuidResponse](
			httpClient,
			baseURL+SummonerServiceGetSummonerByPuuidProcedure,
			connect.WithSchema(summonerServiceGetSummonerByPuuidMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSummonerSpells: connect.NewClient[v1.GetSummonerSpellsRequest, v1.GetSummonerSpellsResponse](
			httpClient,
			baseURL+SummonerServiceGetSummonerSpellsProcedure,
			connect.WithSchema(summonerServiceGetSummonerSpellsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// summonerServiceClient implements SummonerServiceClient.
type summonerServiceClient struct {
	getSummonerByPuuid *connect.Client[v1.GetSummonerByPuuidRequest, v1.GetSummonerByPuuidResponse]
	getSummonerSpells  *connect.Client[v1.GetSummonerSpellsRequest, v1.GetSummonerSpellsResponse]
}

// GetSummonerByPuuid calls summoner.SummonerService.GetSummonerByPuuid.
func (c *summonerServiceClient) GetSummonerByPuuid(ctx context.Context, req *connect.Request[v1.GetSummonerByPuuidRequest]) (*connect.Response[v1.GetSummonerByPuuidResponse], error) {
	return c.getSummonerByPuuid.CallUnary(ctx, req)
}

// GetSummonerSpells calls summoner.SummonerService.GetSummonerSpells.
func (c *summonerServiceClient) GetSummonerSpells(ctx context.Context, req *connect.Request[v1.GetSummonerSpellsRequest]) (*connect.Response[v1.GetSummonerSpellsResponse], error) {
	return c.getSummonerSpells.CallUnary(ctx, req)
}

// SummonerServiceHandler is an implementation of the summoner.SummonerService service.
type SummonerServiceHandler interface {
	GetSummonerByPuuid(context.Context, *connect.Request[v1.GetSummonerByPuuidRequest]) (*connect.Response[v1.GetSummonerByPuuidResponse], error)
	GetSummonerSpells(context.Context, *connect.Request[v1.GetSummonerSpellsRequest]) (*connect.Response[v1.GetSummonerSpellsResponse], error)
}

// NewSummonerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSummonerServiceHandler(svc SummonerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	summonerServiceGetSummonerByPuuidHandler := connect.NewUnaryHandler(
		SummonerServiceGetSummonerByPuuidProcedure,
		svc.GetSummonerByPuuid,
		connect.WithSchema(summonerServiceGetSummonerByPuuidMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	summonerServiceGetSummonerSpellsHandler := connect.NewUnaryHandler(
		SummonerServiceGetSummonerSpellsProcedure,
		svc.GetSummonerSpells,
		connect.WithSchema(summonerServiceGetSummonerSpellsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/summoner.SummonerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SummonerServiceGetSummonerByPuuidProcedure:
			summonerServiceGetSummonerByPuuidHandler.ServeHTTP(w, r)
		case SummonerServiceGetSummonerSpellsProcedure:
			summonerServiceGetSummonerSpellsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSummonerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSummonerServiceHandler struct{}

func (UnimplementedSummonerServiceHandler) GetSummonerByPuuid(context.Context, *connect.Request[v1.GetSummonerByPuuidRequest]) (*connect.Response[v1.GetSummonerByPuuidResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("summoner.SummonerService.GetSummonerByPuuid is not implemented"))
}

func (UnimplementedSummonerServiceHandler) GetSummonerSpells(context.Context, *connect.Request[v1.GetSummonerSpellsRequest]) (*connect.Response[v1.GetSummonerSpellsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("summoner.SummonerService.GetSummonerSpells is not implemented"))
}
